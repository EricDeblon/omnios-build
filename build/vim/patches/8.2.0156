To: vim_dev@googlegroups.com
Subject: Patch 8.2.0156
Fcc: outbox
From: Bram Moolenaar <Bram@moolenaar.net>
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
------------

Patch 8.2.0156
Problem:    Various typos in source files and tests.
Solution:   Fix the typos. (Emir Sari, closes #5532)
Files:	    Makefile, src/INSTALLvms.txt, src/Make_vms.mms, src/beval.h,
            src/buffer.c, src/charset.c, src/evalvars.c, src/ex_cmds.c,
            src/ex_docmd.c, src/getchar.c, src/gui.c, src/gui_mac.c,
            src/gui_photon.c, src/if_perl.xs,
            src/libvterm/t/11state_movecursor.test,
            src/libvterm/t/41screen_unicode.test, src/mbyte.c, src/memline.c,
            src/normal.c, src/ops.c, src/option.c, src/option.h,
            src/os_unix.c, src/os_win32.c, src/quickfix.c, src/register.c,
            src/spell.c, src/tag.c, src/term.c,
            src/testdir/test_breakindent.vim, src/testdir/test_channel.vim,
            src/testdir/test_cindent.vim, src/testdir/test_digraph.vim,
            src/testdir/test_edit.vim, src/testdir/test_netbeans.vim,
            src/testdir/test_quickfix.vim, src/testdir/test_registers.vim,
            src/testdir/test_stat.vim, src/ui.c, src/xxd/xxd.c


*** ../vim-8.2.0155/Makefile	2019-12-12 12:43:06.000000000 +0100
--- Makefile	2020-01-26 21:53:39.250270957 +0100
***************
*** 145,151 ****
  # - > make dossrc
  #   > make dosrt
  #   Unpack dist/vim##rt.zip and dist/vim##src.zip on an MS-Windows PC.
! #   This creates the directory vim/vim81 and puts all files in there.
  # Win32 console version build:
  # - See src/INSTALLpc.txt for installing the compiler and SDK.
  # - Set environment for Visual C++ 2015:
--- 145,151 ----
  # - > make dossrc
  #   > make dosrt
  #   Unpack dist/vim##rt.zip and dist/vim##src.zip on an MS-Windows PC.
! #   This creates the directory vim/vim82 and puts all files in there.
  # Win32 console version build:
  # - See src/INSTALLpc.txt for installing the compiler and SDK.
  # - Set environment for Visual C++ 2015:
***************
*** 153,159 ****
  #   > msvc2015.bat
  # - Build the console binary:
  #   > nmake -f Make_mvc.mak
! # - Run the tests and check the ouput:
  #   > nmake -f Make_mvc.mak testclean
  #   > nmake -f Make_mvc.mak test
  # - Rename (using ../tools/rename.bat):
--- 153,159 ----
  #   > msvc2015.bat
  # - Build the console binary:
  #   > nmake -f Make_mvc.mak
! # - Run the tests and check the output:
  #   > nmake -f Make_mvc.mak testclean
  #   > nmake -f Make_mvc.mak test
  # - Rename (using ../tools/rename.bat):
***************
*** 203,209 ****
  #   Note: VisVim needs to be build with MSVC 5, newer versions don't work.
  #   gvimext64.dll can be obtained from:
  #   https://github.com/vim/vim-win32-installer/releases
! #	It is part of gvim_8.0.*_x64.zip as vim/vim80/GvimExt/gvimext64.dll.
  # - Make sure there is a diff.exe two levels up (get it from a previous Vim
  #   version).  Also put winpty32.dll and winpty-agent.exe there.
  # - go to ../nsis and do:
--- 203,209 ----
  #   Note: VisVim needs to be build with MSVC 5, newer versions don't work.
  #   gvimext64.dll can be obtained from:
  #   https://github.com/vim/vim-win32-installer/releases
! #	It is part of gvim_8.2.*_x64.zip as vim/vim82/GvimExt/gvimext64.dll.
  # - Make sure there is a diff.exe two levels up (get it from a previous Vim
  #   version).  Also put winpty32.dll and winpty-agent.exe there.
  # - go to ../nsis and do:
*** ../vim-8.2.0155/src/INSTALLvms.txt	2019-07-14 20:15:58.000000000 +0200
--- src/INSTALLvms.txt	2020-01-26 21:53:39.250270957 +0100
***************
*** 198,204 ****
       more information can be found in os_vms_fix.com file itself.
  
       NOTE: even if os_vms_fix.com will fix all pre-processor directives it will
!      leave singe (long) line directives. You have to fix them manually.
       Known problematic files are option.h and option.c
  
  4.2. After the conversion you can continue building as it has been described
--- 198,204 ----
       more information can be found in os_vms_fix.com file itself.
  
       NOTE: even if os_vms_fix.com will fix all pre-processor directives it will
!      leave single (long) line directives. You have to fix them manually.
       Known problematic files are option.h and option.c
  
  4.2. After the conversion you can continue building as it has been described
***************
*** 319,325 ****
  
       Build it as normally.
  
!      Used sharable images are:
  	gtk_root:[glib]libglib.exe /share,-
  	gtk_root:[glib.gmodule]libgmodule.exe /share,-
  	gtk_root:[gtk.gdk]libgdk.exe /share,-
--- 319,325 ----
  
       Build it as normally.
  
!      Used shareable images are:
  	gtk_root:[glib]libglib.exe /share,-
  	gtk_root:[glib.gmodule]libgmodule.exe /share,-
  	gtk_root:[gtk.gdk]libgdk.exe /share,-
*** ../vim-8.2.0155/src/Make_vms.mms	2019-12-14 13:09:13.658894314 +0100
--- src/Make_vms.mms	2020-01-26 21:53:39.250270957 +0100
***************
*** 281,287 ****
   $(TCL_INC)$(XDIFF_INC)$(XPM_INC))
  
  # CFLAGS displayed in :ver information
! # It is specially formated for correct display of unix like includes
  # as $(GUI_INC) - replaced with $(GUI_INC_VER)
  # Otherwise should not be any other difference.
  ALL_CFLAGS_VER = /def=($(MODEL_DEF)$(DEFS)$(DEBUG_DEF)$(PERL_DEF)$(PYTHON_DEF) -
--- 281,287 ----
   $(TCL_INC)$(XDIFF_INC)$(XPM_INC))
  
  # CFLAGS displayed in :ver information
! # It is specially formatted for correct display of unix like includes
  # as $(GUI_INC) - replaced with $(GUI_INC_VER)
  # Otherwise should not be any other difference.
  ALL_CFLAGS_VER = /def=($(MODEL_DEF)$(DEFS)$(DEBUG_DEF)$(PERL_DEF)$(PYTHON_DEF) -
*** ../vim-8.2.0155/src/beval.h	2019-11-30 17:54:45.000000000 +0100
--- src/beval.h	2020-01-26 21:53:39.250270957 +0100
***************
*** 38,44 ****
      GtkWidget		*balloonShell;
      GtkWidget		*balloonLabel;
      unsigned int	timerID;	// timer for run
!     BeState		showState;	// tells us whats currently going on
      int			x;
      int			y;
      unsigned int	state;		// Button/Modifier key state
--- 38,44 ----
      GtkWidget		*balloonShell;
      GtkWidget		*balloonLabel;
      unsigned int	timerID;	// timer for run
!     BeState		showState;	// tells us what's currently going on
      int			x;
      int			y;
      unsigned int	state;		// Button/Modifier key state
***************
*** 48,54 ****
      Widget		balloonShell;
      Widget		balloonLabel;
      XtIntervalId	timerID;	// timer for run
!     BeState		showState;	// tells us whats currently going on
      XtAppContext	appContext;	// used in event handler
      Position		x;
      Position		y;
--- 48,54 ----
      Widget		balloonShell;
      Widget		balloonLabel;
      XtIntervalId	timerID;	// timer for run
!     BeState		showState;	// tells us what's currently going on
      XtAppContext	appContext;	// used in event handler
      Position		x;
      Position		y;
***************
*** 60,66 ****
      HWND		balloon;
      int			x;
      int			y;
!     BeState		showState;	// tells us whats currently going on
  #  endif
  # endif
  # if !defined(FEAT_GUI_GTK) && !defined(FEAT_GUI_MSWIN)
--- 60,66 ----
      HWND		balloon;
      int			x;
      int			y;
!     BeState		showState;	// tells us what's currently going on
  #  endif
  # endif
  # if !defined(FEAT_GUI_GTK) && !defined(FEAT_GUI_MSWIN)
*** ../vim-8.2.0155/src/buffer.c	2020-01-07 20:59:30.524926537 +0100
--- src/buffer.c	2020-01-26 21:53:39.254270939 +0100
***************
*** 1690,1696 ****
      set_bufref(&prevbufref, prevbuf);
      set_bufref(&newbufref, buf);
  
!     // Autocommands may delete the curren buffer and/or the buffer we wan to go
      // to.  In those cases don't close the buffer.
      if (!apply_autocmds(EVENT_BUFLEAVE, NULL, NULL, FALSE, curbuf)
  	    || (bufref_valid(&prevbufref)
--- 1690,1696 ----
      set_bufref(&prevbufref, prevbuf);
      set_bufref(&newbufref, buf);
  
!     // Autocommands may delete the current buffer and/or the buffer we want to go
      // to.  In those cases don't close the buffer.
      if (!apply_autocmds(EVENT_BUFLEAVE, NULL, NULL, FALSE, curbuf)
  	    || (bufref_valid(&prevbufref)
***************
*** 1713,1718 ****
--- 1713,1719 ----
  #endif
  	{
  	    win_T  *previouswin = curwin;
+ 
  	    if (prevbuf == curbuf)
  		u_sync(FALSE);
  	    close_buffer(prevbuf == curwin->w_buffer ? curwin : NULL, prevbuf,
*** ../vim-8.2.0155/src/charset.c	2019-11-30 20:49:03.000000000 +0100
--- src/charset.c	2020-01-26 21:53:39.254270939 +0100
***************
*** 1939,1945 ****
  	}
      }
  
!     // Check for an alpha-numeric character immediately following, that is
      // most likely a typo.
      if (strict && n - 1 != maxlen && ASCII_ISALNUM(*ptr))
  	return;
--- 1939,1945 ----
  	}
      }
  
!     // Check for an alphanumeric character immediately following, that is
      // most likely a typo.
      if (strict && n - 1 != maxlen && ASCII_ISALNUM(*ptr))
  	return;
*** ../vim-8.2.0155/src/evalvars.c	2020-01-26 19:26:42.794068329 +0100
--- src/evalvars.c	2020-01-26 21:54:22.738074646 +0100
***************
*** 2813,2819 ****
  		    char_u *val = tv_get_string(tv);
  
  		    // Careful: when assigning to v:errmsg and tv_get_string()
! 		    // causes an error message the variable will alrady be set.
  		    if (di->di_tv.vval.v_string == NULL)
  			di->di_tv.vval.v_string = vim_strsave(val);
  		}
--- 2813,2819 ----
  		    char_u *val = tv_get_string(tv);
  
  		    // Careful: when assigning to v:errmsg and tv_get_string()
! 		    // causes an error message the variable will already be set.
  		    if (di->di_tv.vval.v_string == NULL)
  			di->di_tv.vval.v_string = vim_strsave(val);
  		}
*** ../vim-8.2.0155/src/ex_cmds.c	2019-12-27 17:20:51.533918083 +0100
--- src/ex_cmds.c	2020-01-26 21:53:39.254270939 +0100
***************
*** 5288,5294 ****
   * Return a heuristic indicating how well the given string matches.  The
   * smaller the number, the better the match.  This is the order of priorities,
   * from best match to worst match:
!  *	- Match with least alpha-numeric characters is better.
   *	- Match with least total characters is better.
   *	- Match towards the start is better.
   *	- Match starting with "+" is worse (feature instead of command)
--- 5288,5294 ----
   * Return a heuristic indicating how well the given string matches.  The
   * smaller the number, the better the match.  This is the order of priorities,
   * from best match to worst match:
!  *	- Match with least alphanumeric characters is better.
   *	- Match with least total characters is better.
   *	- Match towards the start is better.
   *	- Match starting with "+" is worse (feature instead of command)
*** ../vim-8.2.0155/src/ex_docmd.c	2020-01-26 19:26:42.794068329 +0100
--- src/ex_docmd.c	2020-01-26 21:53:39.254270939 +0100
***************
*** 6134,6140 ****
  }
  
  /*
!  * ":edit <file>" command and alikes.
   */
      void
  do_exedit(
--- 6134,6140 ----
  }
  
  /*
!  * ":edit <file>" command and alike.
   */
      void
  do_exedit(
*** ../vim-8.2.0155/src/getchar.c	2019-12-01 21:50:57.000000000 +0100
--- src/getchar.c	2020-01-26 21:53:39.254270939 +0100
***************
*** 3237,3243 ****
   *	1. a scriptfile
   *	2. the keyboard
   *
!  *  As much characters as we can get (upto 'maxlen') are put in "buf" and
   *  NUL terminated (buffer length must be 'maxlen' + 1).
   *  Minimum for "maxlen" is 3!!!!
   *
--- 3237,3243 ----
   *	1. a scriptfile
   *	2. the keyboard
   *
!  *  As many characters as we can get (up to 'maxlen') are put in "buf" and
   *  NUL terminated (buffer length must be 'maxlen' + 1).
   *  Minimum for "maxlen" is 3!!!!
   *
*** ../vim-8.2.0155/src/gui.c	2020-01-26 15:52:33.019833259 +0100
--- src/gui.c	2020-01-26 21:53:39.258270923 +0100
***************
*** 3420,3426 ****
      if (oldval != NULL && gui.in_use)
      {
  	/*
! 	 * Check if the menu's go from grey to non-grey or vise versa.
  	 */
  	grey_old = (vim_strchr(oldval, GO_GREY) != NULL);
  	grey_new = (vim_strchr(p_go, GO_GREY) != NULL);
--- 3420,3426 ----
      if (oldval != NULL && gui.in_use)
      {
  	/*
! 	 * Check if the menus go from grey to non-grey or vice versa.
  	 */
  	grey_old = (vim_strchr(oldval, GO_GREY) != NULL);
  	grey_new = (vim_strchr(p_go, GO_GREY) != NULL);
*** ../vim-8.2.0155/src/gui_mac.c	2019-12-02 22:15:16.000000000 +0100
--- src/gui_mac.c	2020-01-26 21:53:39.258270923 +0100
***************
*** 2919,2925 ****
  
      (void)FSGetCatalogInfo(&applFSRef, kFSCatInfoNone, NULL, NULL, &applDir, NULL);
  
!     // This technic return NIL when we disallow_gui
  # endif
      exe_name = FullPathFromFSSpec_save(applDir);
  #endif
--- 2919,2925 ----
  
      (void)FSGetCatalogInfo(&applFSRef, kFSCatInfoNone, NULL, NULL, &applDir, NULL);
  
!     // This technique returns NIL when we disallow_gui
  # endif
      exe_name = FullPathFromFSSpec_save(applDir);
  #endif
*** ../vim-8.2.0155/src/gui_photon.c	2019-12-02 22:24:44.000000000 +0100
--- src/gui_photon.c	2020-01-26 21:53:39.258270923 +0100
***************
*** 1206,1212 ****
  
      /*
       * Now that the text area widget has been created, set up the colours,
!      * which wil call PtSetResource from gui_mch_new_colors
       */
  
      /*
--- 1206,1212 ----
  
      /*
       * Now that the text area widget has been created, set up the colours,
!      * which will call PtSetResource from gui_mch_new_colors
       */
  
      /*
*** ../vim-8.2.0155/src/if_perl.xs	2020-01-06 21:22:05.681590637 +0100
--- src/if_perl.xs	2020-01-26 21:53:39.258270923 +0100
***************
*** 930,936 ****
  
      if (SvRV(sv) != SvRV(rv))
  	// XXX: This magic variable is a bit confusing...
! 	// Is curently refcounted ?
  	sv_setsv(sv, rv);
  
      SvREFCNT_dec(rv);
--- 930,936 ----
  
      if (SvRV(sv) != SvRV(rv))
  	// XXX: This magic variable is a bit confusing...
! 	// Is currently refcounted ?
  	sv_setsv(sv, rv);
  
      SvREFCNT_dec(rv);
*** ../vim-8.2.0155/src/libvterm/t/11state_movecursor.test	2017-06-24 16:44:02.000000000 +0200
--- src/libvterm/t/11state_movecursor.test	2020-01-26 21:53:39.258270923 +0100
***************
*** 112,118 ****
  PUSH "\e[0F"
    ?cursor = 0,0
  
! !Cursor Horizonal Absolute
  PUSH "\n"
    ?cursor = 1,0
  PUSH "\e[20G"
--- 112,118 ----
  PUSH "\e[0F"
    ?cursor = 0,0
  
! !Cursor Horizontal Absolute
  PUSH "\n"
    ?cursor = 1,0
  PUSH "\e[20G"
*** ../vim-8.2.0155/src/libvterm/t/41screen_unicode.test	2017-06-24 16:44:02.000000000 +0200
--- src/libvterm/t/41screen_unicode.test	2020-01-26 21:53:39.258270923 +0100
***************
*** 40,46 ****
  PUSH  "\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81"
    ?screen_cell 0,0 = {0x65,0x301,0x301,0x301,0x301,0x301} width=1 attrs={} fg=rgb(240,240,240) bg=rgb(0,0,0)
  
! !Outputing CJK doublewidth in 80th column should wraparound to next line and not crash"
  RESET
  PUSH "\e[80G\xEF\xBC\x90"
    ?screen_cell 0,79 = {} width=1 attrs={} fg=rgb(240,240,240) bg=rgb(0,0,0)
--- 40,46 ----
  PUSH  "\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81\xCC\x81"
    ?screen_cell 0,0 = {0x65,0x301,0x301,0x301,0x301,0x301} width=1 attrs={} fg=rgb(240,240,240) bg=rgb(0,0,0)
  
! !Outputting CJK doublewidth in 80th column should wraparound to next line and not crash"
  RESET
  PUSH "\e[80G\xEF\xBC\x90"
    ?screen_cell 0,79 = {} width=1 attrs={} fg=rgb(240,240,240) bg=rgb(0,0,0)
*** ../vim-8.2.0155/src/mbyte.c	2019-12-04 21:50:22.000000000 +0100
--- src/mbyte.c	2020-01-26 21:53:39.258270923 +0100
***************
*** 960,966 ****
  			// special symbols
  			return 10;
  		    case 0x23:
! 			// alpha-numeric
  			return 11;
  		    case 0x24:
  			// hiragana
--- 960,966 ----
  			// special symbols
  			return 10;
  		    case 0x23:
! 			// alphanumeric
  			return 11;
  		    case 0x24:
  			// hiragana
***************
*** 994,1000 ****
  		 * 20 : Hangul
  		 * 21 : Hanja
  		 * 22 : Symbols
! 		 * 23 : Alpha-numeric/Roman Letter (Full width)
  		 * 24 : Hangul Letter(Alphabet)
  		 * 25 : Roman Numeral/Greek Letter
  		 * 26 : Box Drawings
--- 994,1000 ----
  		 * 20 : Hangul
  		 * 21 : Hanja
  		 * 22 : Symbols
! 		 * 23 : Alphanumeric/Roman Letter (Full width)
  		 * 24 : Hangul Letter(Alphabet)
  		 * 25 : Roman Numeral/Greek Letter
  		 * 26 : Box Drawings
***************
*** 1025,1031 ****
  			// Symbols
  			return 22;
  		    case 0xA3:
! 			// Alpha-numeric
  			return 23;
  		    case 0xA4:
  			// Hangul Letter(Alphabet)
--- 1025,1031 ----
  			// Symbols
  			return 22;
  		    case 0xA3:
! 			// Alphanumeric
  			return 23;
  		    case 0xA4:
  			// Hangul Letter(Alphabet)
*** ../vim-8.2.0155/src/memline.c	2020-01-17 21:00:55.488151211 +0100
--- src/memline.c	2020-01-26 21:53:39.258270923 +0100
***************
*** 111,117 ****
      unsigned	db_txt_end;	// byte just after data block
      linenr_T	db_line_count;	// number of lines in this block
      unsigned	db_index[1];	// index for start of line (actually bigger)
! 				// followed by empty space upto db_txt_start
  				// followed by the text in the lines until
  				// end of page
  };
--- 111,117 ----
      unsigned	db_txt_end;	// byte just after data block
      linenr_T	db_line_count;	// number of lines in this block
      unsigned	db_index[1];	// index for start of line (actually bigger)
! 				// followed by empty space up to db_txt_start
  				// followed by the text in the lines until
  				// end of page
  };
*** ../vim-8.2.0155/src/normal.c	2019-12-05 20:05:26.000000000 +0100
--- src/normal.c	2020-01-26 21:53:39.258270923 +0100
***************
*** 5659,5665 ****
      VIsual_reselect = TRUE;
  
      // Corner case: the 0 position in a tab may change when going into
!     // virtualedit.  Recalculate curwin->w_cursor to avoid bad hilighting.
      if (c == Ctrl_V && (ve_flags & VE_BLOCK) && gchar_cursor() == TAB)
      {
  	validate_virtcol();
--- 5659,5665 ----
      VIsual_reselect = TRUE;
  
      // Corner case: the 0 position in a tab may change when going into
!     // virtualedit.  Recalculate curwin->w_cursor to avoid bad highlighting.
      if (c == Ctrl_V && (ve_flags & VE_BLOCK) && gchar_cursor() == TAB)
      {
  	validate_virtcol();
*** ../vim-8.2.0155/src/ops.c	2020-01-23 20:58:05.519775046 +0100
--- src/ops.c	2020-01-26 21:53:39.262270902 +0100
***************
*** 314,320 ****
  	 *  3. Divvy into TABs & spp
  	 *  4. Construct new string
  	 */
! 	total += bd.pre_whitesp; // all virtual WS upto & incl a split TAB
  	ws_vcol = bd.start_vcol - bd.pre_whitesp;
  	if (bd.startspaces)
  	{
--- 314,320 ----
  	 *  3. Divvy into TABs & spp
  	 *  4. Construct new string
  	 */
! 	total += bd.pre_whitesp; // all virtual WS up to & incl a split TAB
  	ws_vcol = bd.start_vcol - bd.pre_whitesp;
  	if (bd.startspaces)
  	{
*** ../vim-8.2.0155/src/option.c	2020-01-18 15:53:15.950799342 +0100
--- src/option.c	2020-01-26 21:53:39.262270902 +0100
***************
*** 3155,3161 ****
  
  #if defined(FEAT_EVAL)
      // Save the global value before changing anything. This is needed as for
!     // a global-only option setting the "local value" infact sets the global
      // value (since there is only one value).
      if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0)
  	old_global_value = *(long *)get_varp_scope(&(options[opt_idx]),
--- 3155,3161 ----
  
  #if defined(FEAT_EVAL)
      // Save the global value before changing anything. This is needed as for
!     // a global-only option setting the "local value" in fact sets the global
      // value (since there is only one value).
      if ((opt_flags & (OPT_LOCAL | OPT_GLOBAL)) == 0)
  	old_global_value = *(long *)get_varp_scope(&(options[opt_idx]),
*** ../vim-8.2.0155/src/option.h	2019-11-30 22:40:44.000000000 +0100
--- src/option.h	2020-01-26 21:53:39.262270902 +0100
***************
*** 1066,1072 ****
  EXTERN long	p_wd;		// 'writedelay'
  
  /*
!  * "indir" values for buffer-local opions.
   * These need to be defined globally, so that the BV_COUNT can be used with
   * b_p_scriptID[].
   */
--- 1066,1072 ----
  EXTERN long	p_wd;		// 'writedelay'
  
  /*
!  * "indir" values for buffer-local options.
   * These need to be defined globally, so that the BV_COUNT can be used with
   * b_p_scriptID[].
   */
*** ../vim-8.2.0155/src/os_unix.c	2020-01-17 19:32:14.747571995 +0100
--- src/os_unix.c	2020-01-26 21:53:39.262270902 +0100
***************
*** 1931,1937 ****
  	 * keep traversing up the tree until a window with a title/icon is
  	 * found.
  	 */
! 	// Previously this was only done for xterm and alikes.  I don't see a
  	// reason why it would fail for other terminal emulators.
  	// if (term_is_xterm)
  	{
--- 1931,1937 ----
  	 * keep traversing up the tree until a window with a title/icon is
  	 * found.
  	 */
! 	// Previously this was only done for xterm and alike.  I don't see a
  	// reason why it would fail for other terminal emulators.
  	// if (term_is_xterm)
  	{
*** ../vim-8.2.0155/src/os_win32.c	2019-12-27 13:49:19.984946890 +0100
--- src/os_win32.c	2020-01-26 21:53:39.262270902 +0100
***************
*** 6927,6933 ****
  	return 0;
      pStackBase = (BYTE*)mbi.AllocationBase;
  
!     // ...and the page thats min_stack_req pages away from stack base; this is
      // the lowest page we could use.
      pLowestPossiblePage = pStackBase + MIN_STACK_WINNT * nPageSize;
  
--- 6927,6933 ----
  	return 0;
      pStackBase = (BYTE*)mbi.AllocationBase;
  
!     // ...and the page that's min_stack_req pages away from stack base; this is
      // the lowest page we could use.
      pLowestPossiblePage = pStackBase + MIN_STACK_WINNT * nPageSize;
  
*** ../vim-8.2.0155/src/quickfix.c	2019-12-14 16:18:11.578458401 +0100
--- src/quickfix.c	2020-01-26 21:53:39.262270902 +0100
***************
*** 2771,2777 ****
  }
  
  /*
!  * Get a entry specied by 'errornr' and 'dir' from the current
   * quickfix/location list. 'errornr' specifies the index of the entry and 'dir'
   * specifies the direction (FORWARD/BACKWARD/FORWARD_FILE/BACKWARD_FILE).
   * Returns a pointer to the entry and the index of the new entry is stored in
--- 2771,2777 ----
  }
  
  /*
!  * Get a entry specified by 'errornr' and 'dir' from the current
   * quickfix/location list. 'errornr' specifies the index of the entry and 'dir'
   * specifies the direction (FORWARD/BACKWARD/FORWARD_FILE/BACKWARD_FILE).
   * Returns a pointer to the entry and the index of the new entry is stored in
***************
*** 6320,6326 ****
  
  #if defined(FEAT_EVAL) || defined(PROTO)
  /*
!  * Copy the specified quickfix entry items into a new dict and appened the dict
   * to 'list'.  Returns OK on success.
   */
      static int
--- 6320,6326 ----
  
  #if defined(FEAT_EVAL) || defined(PROTO)
  /*
!  * Copy the specified quickfix entry items into a new dict and append the dict
   * to 'list'.  Returns OK on success.
   */
      static int
*** ../vim-8.2.0155/src/register.c	2019-12-07 17:44:58.000000000 +0100
--- src/register.c	2020-01-26 21:53:39.262270902 +0100
***************
*** 590,596 ****
  	if (y_current->y_array == NULL)
  	    return FAIL;
  
! 	// Disallow remaping for ":@r".
  	remap = colon ? REMAP_NONE : REMAP_YES;
  
  	// Insert lines into typeahead buffer, from last one to first one.
--- 590,596 ----
  	if (y_current->y_array == NULL)
  	    return FAIL;
  
! 	// Disallow remapping for ":@r".
  	remap = colon ? REMAP_NONE : REMAP_YES;
  
  	// Insert lines into typeahead buffer, from last one to first one.
*** ../vim-8.2.0155/src/spell.c	2019-12-05 21:16:28.000000000 +0100
--- src/spell.c	2020-01-26 21:53:39.266270885 +0100
***************
*** 1786,1792 ****
  count_common_word(
      slang_T	*lp,
      char_u	*word,
!     int		len,	    // word length, -1 for upto NUL
      int		count)	    // 1 to count once, 10 to init
  {
      hash_T	hash;
--- 1786,1792 ----
  count_common_word(
      slang_T	*lp,
      char_u	*word,
!     int		len,	    // word length, -1 for up to NUL
      int		count)	    // 1 to count once, 10 to init
  {
      hash_T	hash;
*** ../vim-8.2.0155/src/tag.c	2020-01-05 20:35:39.963830427 +0100
--- src/tag.c	2020-01-26 21:53:39.266270885 +0100
***************
*** 4123,4129 ****
  
  /*
   * Remove the oldest entry from the tag stack and shift the rest of
!  * the entires to free up the top of the stack.
   */
      static void
  tagstack_shift(win_T *wp)
--- 4123,4129 ----
  
  /*
   * Remove the oldest entry from the tag stack and shift the rest of
!  * the entries to free up the top of the stack.
   */
      static void
  tagstack_shift(win_T *wp)
*** ../vim-8.2.0155/src/term.c	2020-01-24 20:21:15.389142318 +0100
--- src/term.c	2020-01-26 21:53:39.266270885 +0100
***************
*** 146,152 ****
  // Request cursor style report:
  static termrequest_T rcs_status = TERMREQUEST_INIT;
  
! // Request windos position report:
  static termrequest_T winpos_status = TERMREQUEST_INIT;
  
  static termrequest_T *all_termrequests[] = {
--- 146,152 ----
  // Request cursor style report:
  static termrequest_T rcs_status = TERMREQUEST_INIT;
  
! // Request window's position report:
  static termrequest_T winpos_status = TERMREQUEST_INIT;
  
  static termrequest_T *all_termrequests[] = {
*** ../vim-8.2.0155/src/testdir/test_breakindent.vim	2020-01-23 19:59:16.285588199 +0100
--- src/testdir/test_breakindent.vim	2020-01-26 21:53:39.266270885 +0100
***************
*** 1,7 ****
  " Test for breakindent
  "
  " Note: if you get strange failures when adding new tests, it might be that
! " while the test is run, the breakindent cacheing gets in its way.
  " It helps to change the tabstop setting and force a redraw (e.g. see
  " Test_breakindent08())
  source check.vim
--- 1,7 ----
  " Test for breakindent
  "
  " Note: if you get strange failures when adding new tests, it might be that
! " while the test is run, the breakindent caching gets in its way.
  " It helps to change the tabstop setting and force a redraw (e.g. see
  " Test_breakindent08())
  source check.vim
*** ../vim-8.2.0155/src/testdir/test_channel.vim	2020-01-20 21:59:35.703653287 +0100
--- src/testdir/test_channel.vim	2020-01-26 21:53:39.266270885 +0100
***************
*** 20,26 ****
  
  let s:chopt = {}
  
! " Run "testfunc" after sarting the server and stop the server afterwards.
  func s:run_server(testfunc, ...)
    call RunServer('test_channel.py', a:testfunc, a:000)
  endfunc
--- 20,26 ----
  
  let s:chopt = {}
  
! " Run "testfunc" after starting the server and stop the server afterwards.
  func s:run_server(testfunc, ...)
    call RunServer('test_channel.py', a:testfunc, a:000)
  endfunc
***************
*** 425,431 ****
  
    " We intend to use a socket that doesn't exist and wait for half a second
    " before giving up.  If the socket does exist it can fail in various ways.
!   " Check for "Connection reset by peer" to avoid flakyness.
    let start = reltime()
    try
      let handle = ch_open('localhost:9867', {'waittime': 500})
--- 425,431 ----
  
    " We intend to use a socket that doesn't exist and wait for half a second
    " before giving up.  If the socket does exist it can fail in various ways.
!   " Check for "Connection reset by peer" to avoid flakiness.
    let start = reltime()
    try
      let handle = ch_open('localhost:9867', {'waittime': 500})
*** ../vim-8.2.0155/src/testdir/test_cindent.vim	2020-01-12 13:48:15.627286141 +0100
--- src/testdir/test_cindent.vim	2020-01-26 21:53:39.266270885 +0100
***************
*** 815,821 ****
          }
       }
  
!   public: // <-- this was incorectly indented before!!
       void testfall();
    protected:
       void testfall();
--- 815,821 ----
          }
       }
  
!   public: // <-- this was incorrectly indented before!!
       void testfall();
    protected:
       void testfall();
***************
*** 1780,1786 ****
    		}
    	}
  
!   	public: // <-- this was incorectly indented before!!
    	void testfall();
    	protected:
    	void testfall();
--- 1780,1786 ----
    		}
    	}
  
!   	public: // <-- this was incorrectly indented before!!
    	void testfall();
    	protected:
    	void testfall();
***************
*** 5254,5262 ****
  " this was going beyond the end of the line.
  func Test_cindent_case()
    new
!   call setline(1, "case x: // x")
    set cindent
    norm! f:a:
    bwipe!
  endfunc
  
--- 5254,5265 ----
  " this was going beyond the end of the line.
  func Test_cindent_case()
    new
!   call setline(1, 'case x: // x')
    set cindent
    norm! f:a:
+   call assert_equal('case x:: // x', getline(1))
+ 
+   set cindent&
    bwipe!
  endfunc
  
*** ../vim-8.2.0155/src/testdir/test_digraph.vim	2019-06-15 17:31:27.000000000 +0200
--- src/testdir/test_digraph.vim	2020-01-26 21:53:39.266270885 +0100
***************
*** 80,86 ****
    call Put_Dig(".e")
    call Put_Dig("a.") " not defined
    call assert_equal(['ḃ', 'ė', '.'], getline(line('.')-2,line('.')))
!   " Diaresis
    call Put_Dig("a:")
    call Put_Dig(":u")
    call Put_Dig("b:") " not defined
--- 80,86 ----
    call Put_Dig(".e")
    call Put_Dig("a.") " not defined
    call assert_equal(['ḃ', 'ė', '.'], getline(line('.')-2,line('.')))
!   " Diaeresis
    call Put_Dig("a:")
    call Put_Dig(":u")
    call Put_Dig("b:") " not defined
***************
*** 285,291 ****
    call Put_Dig_BS(".","e")
    call Put_Dig_BS("a",".") " not defined
    call assert_equal(['ḃ', 'ė', '.'], getline(line('.')-2,line('.')))
!   " Diaresis
    call Put_Dig_BS("a",":")
    call Put_Dig_BS(":","u")
    call Put_Dig_BS("b",":") " not defined
--- 285,291 ----
    call Put_Dig_BS(".","e")
    call Put_Dig_BS("a",".") " not defined
    call assert_equal(['ḃ', 'ė', '.'], getline(line('.')-2,line('.')))
!   " Diaeresis
    call Put_Dig_BS("a",":")
    call Put_Dig_BS(":","u")
    call Put_Dig_BS("b",":") " not defined
*** ../vim-8.2.0155/src/testdir/test_edit.vim	2019-12-01 15:04:44.000000000 +0100
--- src/testdir/test_edit.vim	2020-01-26 21:53:39.266270885 +0100
***************
*** 589,595 ****
    call feedkeys("A\<c-x>\<c-k>\<down>\<down>\<down>\<down>\<cr>\<esc>", 'tnix')
    call assert_equal(['AA'], getline(1, '$'))
  
!   " press an unexecpted key after dictionary completion
    %d
    call setline(1, 'A')
    call cursor(1, 1)
--- 589,595 ----
    call feedkeys("A\<c-x>\<c-k>\<down>\<down>\<down>\<down>\<cr>\<esc>", 'tnix')
    call assert_equal(['AA'], getline(1, '$'))
  
!   " press an unexpected key after dictionary completion
    %d
    call setline(1, 'A')
    call cursor(1, 1)
*** ../vim-8.2.0155/src/testdir/test_netbeans.vim	2019-06-15 17:37:53.000000000 +0200
--- src/testdir/test_netbeans.vim	2020-01-26 21:53:39.266270885 +0100
***************
*** 10,16 ****
    throw 'Skipped: python program missing'
  endif
  
! " Run "testfunc" after sarting the server and stop the server afterwards.
  func s:run_server(testfunc, ...)
    call RunServer('test_netbeans.py', a:testfunc, a:000)
  endfunc
--- 10,16 ----
    throw 'Skipped: python program missing'
  endif
  
! " Run "testfunc" after starting the server and stop the server afterwards.
  func s:run_server(testfunc, ...)
    call RunServer('test_netbeans.py', a:testfunc, a:000)
  endfunc
*** ../vim-8.2.0155/src/testdir/test_quickfix.vim	2020-01-06 21:47:17.044023198 +0100
--- src/testdir/test_quickfix.vim	2020-01-26 21:53:39.266270885 +0100
***************
*** 2629,2635 ****
    call assert_equal('quickfix', getwinvar(1, '&buftype'))
    call assert_equal('quickfix', getwinvar(3, '&buftype'))
  
!   " Jumping to a file from the location list window should find a usuable
    " window by wrapping around the window list.
    enew | only
    call setloclist(0, [], 'f')
--- 2629,2635 ----
    call assert_equal('quickfix', getwinvar(1, '&buftype'))
    call assert_equal('quickfix', getwinvar(3, '&buftype'))
  
!   " Jumping to a file from the location list window should find a usable
    " window by wrapping around the window list.
    enew | only
    call setloclist(0, [], 'f')
*** ../vim-8.2.0155/src/testdir/test_registers.vim	2019-12-02 20:40:25.000000000 +0100
--- src/testdir/test_registers.vim	2020-01-26 21:53:39.266270885 +0100
***************
*** 274,280 ****
    call setreg('=', 'b', 'a')
    call assert_equal('regwrite', getreg('='))
  
!   " Test for settting a list of lines to special registers
    call setreg('/', [])
    call assert_equal('', @/)
    call setreg('=', [])
--- 274,280 ----
    call setreg('=', 'b', 'a')
    call assert_equal('regwrite', getreg('='))
  
!   " Test for setting a list of lines to special registers
    call setreg('/', [])
    call assert_equal('', @/)
    call setreg('=', [])
*** ../vim-8.2.0155/src/testdir/test_stat.vim	2019-08-30 13:11:25.000000000 +0200
--- src/testdir/test_stat.vim	2020-01-26 21:53:39.266270885 +0100
***************
*** 5,11 ****
    let times = []
    let result = 0
  
!   " Use three files istead of localtim(), with a network filesystem the file
    " times may differ at bit
    let fl = ['Hello World!']
    for fname in fnames
--- 5,11 ----
    let times = []
    let result = 0
  
!   " Use three files instead of localtim(), with a network filesystem the file
    " times may differ at bit
    let fl = ['Hello World!']
    for fname in fnames
*** ../vim-8.2.0155/src/ui.c	2020-01-08 22:06:11.057866613 +0100
--- src/ui.c	2020-01-26 21:53:39.266270885 +0100
***************
*** 1500,1506 ****
  	    row2--;
  	}
  
! 	// Handle the rectangle thats left
  	if (row2 >= row1)
  	    clip_invert_rectangle(cbd, row1, 0, row2 - row1 + 1,
  							 (int)Columns, invert);
--- 1500,1506 ----
  	    row2--;
  	}
  
! 	// Handle the rectangle that's left
  	if (row2 >= row1)
  	    clip_invert_rectangle(cbd, row1, 0, row2 - row1 + 1,
  							 (int)Columns, invert);
*** ../vim-8.2.0155/src/xxd/xxd.c	2019-05-09 15:08:50.000000000 +0200
--- src/xxd/xxd.c	2020-01-26 21:53:39.266270885 +0100
***************
*** 35,41 ****
   *	    xxdline().
   *  7.06.96 -i printed 'int' instead of 'char'. *blush*
   *	    added Bram's OS2 ifdefs...
!  * 18.07.96 gcc -Wall @ SunOS4 is now slient.
   *	    Added osver for MSDOS/DJGPP/WIN32.
   * 29.08.96 Added size_t to strncmp() for Amiga.
   * 24.03.97 Windows NT support (Phil Hanna). Clean exit for Amiga WB (Bram)
--- 35,41 ----
   *	    xxdline().
   *  7.06.96 -i printed 'int' instead of 'char'. *blush*
   *	    added Bram's OS2 ifdefs...
!  * 18.07.96 gcc -Wall @ SunOS4 is now silent.
   *	    Added osver for MSDOS/DJGPP/WIN32.
   * 29.08.96 Added size_t to strncmp() for Amiga.
   * 24.03.97 Windows NT support (Phil Hanna). Clean exit for Amiga WB (Bram)
*** ../vim-8.2.0155/src/version.c	2020-01-26 21:42:00.089532706 +0100
--- src/version.c	2020-01-26 21:55:13.353846710 +0100
***************
*** 744,745 ****
--- 744,747 ----
  {   /* Add new patch number below this line */
+ /**/
+     156,
  /**/

-- 
Engineers understand that their appearance only bothers other people and
therefore it is not worth optimizing.
				(Scott Adams - The Dilbert principle)

 /// Bram Moolenaar -- Bram@Moolenaar.net -- http://www.Moolenaar.net   \\\
///        sponsor Vim, vote for features -- http://www.Vim.org/sponsor/ \\\
\\\  an exciting new programming language -- http://www.Zimbu.org        ///
 \\\            help me help AIDS victims -- http://ICCF-Holland.org    ///
