To: vim_dev@googlegroups.com
Subject: Patch 8.2.0017
Fcc: outbox
From: Bram Moolenaar <Bram@moolenaar.net>
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
------------

Patch 8.2.0017
Problem:    OS/2 and MS-DOS are still mentioned, even though support was
            removed long ago.
Solution:   Update documentation. (Yegappan Lakshmanan, closes #5368)
Files:	    runtime/doc/autocmd.txt, runtime/doc/change.txt,
            runtime/doc/cmdline.txt, runtime/doc/editing.txt,
            runtime/doc/eval.txt, runtime/doc/gui.txt, runtime/doc/insert.txt,
            runtime/doc/options.txt, runtime/doc/print.txt,
            runtime/doc/quickfix.txt, runtime/doc/repeat.txt,
            runtime/doc/starting.txt, runtime/doc/usr_01.txt,
            runtime/doc/usr_05.txt, runtime/doc/usr_41.txt,
            runtime/doc/vi_diff.txt, runtime/gvimrc_example.vim,
            runtime/tools/README.txt, runtime/vimrc_example.vim, src/feature.h


*** ../vim-8.2.0016/runtime/doc/autocmd.txt	2019-12-12 12:49:05.000000000 +0100
--- runtime/doc/autocmd.txt	2019-12-17 21:15:36.469236648 +0100
***************
*** 1,4 ****
! *autocmd.txt*   For Vim version 8.2.  Last change: 2019 Dec 11
  
  
  		  VIM REFERENCE MANUAL    by Bram Moolenaar
--- 1,4 ----
! *autocmd.txt*   For Vim version 8.2.  Last change: 2019 Dec 17
  
  
  		  VIM REFERENCE MANUAL    by Bram Moolenaar
***************
*** 1289,1296 ****
  	[^ch]   match any character but 'c' and 'h'
  
  Note that for all systems the '/' character is used for path separator (even
! MS-DOS and OS/2).  This was done because the backslash is difficult to use
! in a pattern and to make the autocommands portable across different systems.
  
  It is possible to use |pattern| items, but they may not work as expected,
  because of the translation done for the above.
--- 1289,1296 ----
  	[^ch]   match any character but 'c' and 'h'
  
  Note that for all systems the '/' character is used for path separator (even
! for MS-Windows).  This was done because the backslash is difficult to use in a
! pattern and to make the autocommands portable across different systems.
  
  It is possible to use |pattern| items, but they may not work as expected,
  because of the translation done for the above.
*** ../vim-8.2.0016/runtime/doc/change.txt	2019-12-12 12:49:05.000000000 +0100
--- runtime/doc/change.txt	2019-12-17 21:13:06.017961271 +0100
***************
*** 611,617 ****
  all files in it are deleted.  When Vim has the setuid bit set this may cause
  problems, the temp file is owned by the setuid user but the filter command
  probably runs as the original user.
! On MS-DOS and OS/2 the first of these directories that works is used: $TMP,
  $TEMP, c:\TMP, c:\TEMP.
  For Unix the list of directories is: $TMPDIR, /tmp, current-dir, $HOME.
  For MS-Windows the GetTempFileName() system function is used.
--- 611,617 ----
  all files in it are deleted.  When Vim has the setuid bit set this may cause
  problems, the temp file is owned by the setuid user but the filter command
  probably runs as the original user.
! On MS-Windows the first of these directories that works is used: $TMP,
  $TEMP, c:\TMP, c:\TEMP.
  For Unix the list of directories is: $TMPDIR, /tmp, current-dir, $HOME.
  For MS-Windows the GetTempFileName() system function is used.
*** ../vim-8.2.0016/runtime/doc/cmdline.txt	2019-12-12 12:49:05.000000000 +0100
--- runtime/doc/cmdline.txt	2019-12-17 21:16:25.013013289 +0100
***************
*** 1,4 ****
! *cmdline.txt*   For Vim version 8.2.  Last change: 2019 Nov 26
  
  
  		  VIM REFERENCE MANUAL    by Bram Moolenaar
--- 1,4 ----
! *cmdline.txt*   For Vim version 8.2.  Last change: 2019 Dec 17
  
  
  		  VIM REFERENCE MANUAL    by Bram Moolenaar
***************
*** 75,81 ****
  		decimal value of a single byte.  The non-digit and the three
  		digits are not considered for mapping.  This works the same
  		way as in Insert mode (see above, |i_CTRL-V|).
! 		Note: Under Windows CTRL-V is often mapped to paste text.
  		Use CTRL-Q instead then.
  		When |modifyOtherKeys| is enabled then special Escape sequence
  		is converted back to what it was without |modifyOtherKeys|,
--- 75,81 ----
  		decimal value of a single byte.  The non-digit and the three
  		digits are not considered for mapping.  This works the same
  		way as in Insert mode (see above, |i_CTRL-V|).
! 		Note: Under MS-Windows CTRL-V is often mapped to paste text.
  		Use CTRL-Q instead then.
  		When |modifyOtherKeys| is enabled then special Escape sequence
  		is converted back to what it was without |modifyOtherKeys|,
***************
*** 943,951 ****
  		separator is removed.  Thus ":p:h" on a directory name results
  		on the directory name itself (without trailing slash).
  		When the file name is an absolute path (starts with "/" for
! 		Unix; "x:\" for MS-DOS, WIN32, OS/2; "drive:" for Amiga), that
! 		part is not removed.  When there is no head (path is relative
! 		to current directory) the result is empty.
  	:t	Tail of the file name (last component of the name).  Must
  		precede any :r or :e.
  	:r	Root of the file name (the last extension removed).  When
--- 943,951 ----
  		separator is removed.  Thus ":p:h" on a directory name results
  		on the directory name itself (without trailing slash).
  		When the file name is an absolute path (starts with "/" for
! 		Unix; "x:\" for WIN32; "drive:" for Amiga), that part is not
! 		removed.  When there is no head (path is relative to current
! 		directory) the result is empty.
  	:t	Tail of the file name (last component of the name).  Must
  		precede any :r or :e.
  	:r	Root of the file name (the last extension removed).  When
***************
*** 1042,1053 ****
  the "!".
  
  							*filename-backslash*
! For filesystems that use a backslash as directory separator (MS-DOS, Windows,
! OS/2), it's a bit difficult to recognize a backslash that is used to escape
! the special meaning of the next character.  The general rule is: If the
! backslash is followed by a normal file name character, it does not have a
! special meaning.  Therefore "\file\foo" is a valid file name, you don't have
! to type the backslash twice.
  
  An exception is the '$' sign.  It is a valid character in a file name.  But
  to avoid a file name like "$home" to be interpreted as an environment variable,
--- 1042,1053 ----
  the "!".
  
  							*filename-backslash*
! For filesystems that use a backslash as directory separator (MS-Windows), it's
! a bit difficult to recognize a backslash that is used to escape the special
! meaning of the next character.  The general rule is: If the backslash is
! followed by a normal file name character, it does not have a special meaning.
! Therefore "\file\foo" is a valid file name, you don't have to type the
! backslash twice.
  
  An exception is the '$' sign.  It is a valid character in a file name.  But
  to avoid a file name like "$home" to be interpreted as an environment variable,
*** ../vim-8.2.0016/runtime/doc/editing.txt	2019-12-12 12:49:05.000000000 +0100
--- runtime/doc/editing.txt	2019-12-17 21:13:06.017961271 +0100
***************
*** 519,527 ****
  Previously 'textmode' was used.  It is obsolete now.
  
  When reading a file, the mentioned characters are interpreted as the <EOL>.
! In DOS format (default for MS-DOS, OS/2 and Win32), <CR><NL> and <NL> are both
! interpreted as the <EOL>.  Note that when writing the file in DOS format,
! <CR> characters will be added for each single <NL>.  Also see |file-read|.
  
  When writing a file, the mentioned characters are used for <EOL>.  For DOS
  format <CR><NL> is used.  Also see |DOS-format-write|.
--- 519,527 ----
  Previously 'textmode' was used.  It is obsolete now.
  
  When reading a file, the mentioned characters are interpreted as the <EOL>.
! In DOS format (default for Win32), <CR><NL> and <NL> are both interpreted as
! the <EOL>.  Note that when writing the file in DOS format, <CR> characters
! will be added for each single <NL>.  Also see |file-read|.
  
  When writing a file, the mentioned characters are used for <EOL>.  For DOS
  format <CR><NL> is used.  Also see |DOS-format-write|.
***************
*** 1023,1033 ****
  
  						*DOS-format-write*
  If the 'fileformat' is "dos", <CR> <NL> is used for <EOL>.  This is default
! for MS-DOS, Win32 and OS/2.  On other systems the message "[dos format]" is
! shown to remind you that an unusual <EOL> was used.
  						*Unix-format-write*
! If the 'fileformat' is "unix", <NL> is used for <EOL>.  On MS-DOS, Win32 and
! OS/2 the message "[unix format]" is shown.
  						*Mac-format-write*
  If the 'fileformat' is "mac", <CR> is used for <EOL>.  On non-Mac systems the
  message "[mac format]" is shown.
--- 1023,1033 ----
  
  						*DOS-format-write*
  If the 'fileformat' is "dos", <CR> <NL> is used for <EOL>.  This is default
! for Win32.  On other systems the message "[dos format]" is shown to remind you
! that an unusual <EOL> was used.
  						*Unix-format-write*
! If the 'fileformat' is "unix", <NL> is used for <EOL>.  On Win32 the message
! "[unix format]" is shown.
  						*Mac-format-write*
  If the 'fileformat' is "mac", <CR> is used for <EOL>.  On non-Mac systems the
  message "[mac format]" is shown.
*** ../vim-8.2.0016/runtime/doc/eval.txt	2019-12-12 12:49:05.000000000 +0100
--- runtime/doc/eval.txt	2019-12-17 21:13:06.017961271 +0100
***************
*** 9753,9759 ****
  		The command executed is constructed using several options:
  	'shell' 'shellcmdflag' 'shellxquote' {expr} 'shellredir' {tmp} 'shellxquote'
  		({tmp} is an automatically generated file name).
! 		For Unix and OS/2 braces are put around {expr} to allow for
  		concatenated commands.
  
  		The command will be executed in "cooked" mode, so that a
--- 9753,9759 ----
  		The command executed is constructed using several options:
  	'shell' 'shellcmdflag' 'shellxquote' {expr} 'shellredir' {tmp} 'shellxquote'
  		({tmp} is an automatically generated file name).
! 		For Unix, braces are put around {expr} to allow for
  		concatenated commands.
  
  		The command will be executed in "cooked" mode, so that a
*** ../vim-8.2.0016/runtime/doc/gui.txt	2019-12-12 12:49:05.000000000 +0100
--- runtime/doc/gui.txt	2019-12-17 21:13:06.017961271 +0100
***************
*** 95,103 ****
  
  Recommended place for your personal GUI initializations:
  	Unix		    $HOME/.gvimrc or $HOME/.vim/gvimrc
! 	OS/2		    $HOME/.gvimrc, $HOME/vimfiles/gvimrc
! 			    or $VIM/.gvimrc
! 	MS-DOS and Win32    $HOME/_gvimrc, $HOME/vimfiles/gvimrc
  			    or $VIM/_gvimrc
  	Amiga		    s:.gvimrc, home:.gvimrc, home:vimfiles:gvimrc
  			    or $VIM/.gvimrc
--- 95,101 ----
  
  Recommended place for your personal GUI initializations:
  	Unix		    $HOME/.gvimrc or $HOME/.vim/gvimrc
! 	Win32    	    $HOME/_gvimrc, $HOME/vimfiles/gvimrc
  			    or $VIM/_gvimrc
  	Amiga		    s:.gvimrc, home:.gvimrc, home:vimfiles:gvimrc
  			    or $VIM/.gvimrc
*** ../vim-8.2.0016/runtime/doc/insert.txt	2019-12-12 12:49:06.000000000 +0100
--- runtime/doc/insert.txt	2019-12-17 21:13:06.017961271 +0100
***************
*** 2008,2017 ****
  changed, the detected format is only used while reading the file.
  A similar thing happens with 'fileencodings'.
  
! On non-MS-DOS, Win32, and OS/2 systems the message "[dos format]" is shown if
! a file is read in DOS format, to remind you that something unusual is done.
! On Macintosh, MS-DOS, Win32, and OS/2 the message "[unix format]" is shown if
! a file is read in Unix format.
  On non-Macintosh systems, the message "[Mac format]" is shown if a file is
  read in Mac format.
  
--- 2008,2017 ----
  changed, the detected format is only used while reading the file.
  A similar thing happens with 'fileencodings'.
  
! On non-MS-DOS and Win32 systems the message "[dos format]" is shown if a file
! is read in DOS format, to remind you that something unusual is done.  On
! Macintosh and Win32 the message "[unix format]" is shown if a file is read in
! Unix format.
  On non-Macintosh systems, the message "[Mac format]" is shown if a file is
  read in Mac format.
  
*** ../vim-8.2.0016/runtime/doc/options.txt	2019-12-12 12:49:06.000000000 +0100
--- runtime/doc/options.txt	2019-12-17 21:19:33.888182249 +0100
***************
*** 1,4 ****
! *options.txt*	For Vim version 8.2.  Last change: 2019 Dec 06
  
  
  		  VIM REFERENCE MANUAL	  by Bram Moolenaar
--- 1,4 ----
! *options.txt*	For Vim version 8.2.  Last change: 2019 Dec 17
  
  
  		  VIM REFERENCE MANUAL	  by Bram Moolenaar
***************
*** 709,715 ****
  	(or Vim is run inside an xterm invoked with "-cjkwidth" option.),
  	this option should be set to "double" to match the width perceived
  	by Vim with the width of glyphs in the font.  Perhaps it also has
! 	to be set to "double" under CJK Windows 9x/ME or Windows 2k/XP
  	when the system locale is set to one of CJK locales.  See Unicode
  	Standard Annex #11 (http://www.unicode.org/reports/tr11).
  
--- 709,715 ----
  	(or Vim is run inside an xterm invoked with "-cjkwidth" option.),
  	this option should be set to "double" to match the width perceived
  	by Vim with the width of glyphs in the font.  Perhaps it also has
! 	to be set to "double" under CJK MS-Windows 2k/XP
  	when the system locale is set to one of CJK locales.  See Unicode
  	Standard Annex #11 (http://www.unicode.org/reports/tr11).
  
***************
*** 876,882 ****
  	putting a ":gui" command in the .gvimrc file, before where the value
  	of 'background' is used (e.g., before ":syntax on").
  
! 	For MS-DOS, Windows and OS/2 the default is "dark".
  	For other systems "dark" is used when 'term' is "linux",
  	"screen.linux", "cygwin" or "putty", or $COLORFGBG suggests a dark
  	background.  Otherwise the default is "light".
--- 876,882 ----
  	putting a ":gui" command in the .gvimrc file, before where the value
  	of 'background' is used (e.g., before ":syntax on").
  
! 	For MS-Windows the default is "dark".
  	For other systems "dark" is used when 'term' is "linux",
  	"screen.linux", "cygwin" or "putty", or $COLORFGBG suggests a dark
  	background.  Otherwise the default is "light".
***************
*** 1770,1776 ****
  	'esckeys'	& off		no <Esc>-keys in Insert mode
  	'expandtab'	+ off		tabs not expanded to spaces
  	'fileformats'	& ""		no automatic file format detection,
! 			  "dos,unix"	except for DOS, Windows and OS/2
  	'formatexpr'	+ ""		use 'formatprg' for auto-formatting
  	'formatoptions'	& "vt"		Vi compatible formatting
  	'gdefault'	+ off		no default 'g' flag for ":s"
--- 1770,1776 ----
  	'esckeys'	& off		no <Esc>-keys in Insert mode
  	'expandtab'	+ off		tabs not expanded to spaces
  	'fileformats'	& ""		no automatic file format detection,
! 			  "dos,unix"	except for MS-Windows
  	'formatexpr'	+ ""		use 'formatprg' for auto-formatting
  	'formatoptions'	& "vt"		Vi compatible formatting
  	'gdefault'	+ off		no default 'g' flag for ":s"
***************
*** 1882,1890 ****
  	When this option is set it overrules 'shellslash' for completion:
  	- When this option is set to "slash", a forward slash is used for path
  	  completion in insert mode. This is useful when editing HTML tag, or
! 	  Makefile with 'noshellslash' on Windows.
  	- When this option is set to "backslash", backslash is used. This is
! 	  useful when editing a batch file with 'shellslash' set on Windows.
  	- When this option is empty, same character is used as for
  	  'shellslash'.
  	For Insert mode completion the buffer-local value is used.  For
--- 1882,1890 ----
  	When this option is set it overrules 'shellslash' for completion:
  	- When this option is set to "slash", a forward slash is used for path
  	  completion in insert mode. This is useful when editing HTML tag, or
! 	  Makefile with 'noshellslash' on MS-Windows.
  	- When this option is set to "backslash", backslash is used. This is
! 	  useful when editing a batch file with 'shellslash' set on MS-Windows.
  	- When this option is empty, same character is used as for
  	  'shellslash'.
  	For Insert mode completion the buffer-local value is used.  For
***************
*** 4442,4448 ****
  	NOTE: This option is reset when 'compatible' is set.
  
  						*'isfname'* *'isf'*
! 'isfname' 'isf'		string	(default for MS-DOS, Win32 and OS/2:
  			     "@,48-57,/,\,.,-,_,+,,,#,$,%,{,},[,],:,@-@,!,~,="
  			    for AMIGA: "@,48-57,/,.,-,_,+,,,$,:"
  			    for VMS: "@,48-57,/,.,-,_,+,,,#,$,%,<,>,[,],:,;,~"
--- 4442,4448 ----
  	NOTE: This option is reset when 'compatible' is set.
  
  						*'isfname'* *'isf'*
! 'isfname' 'isf'		string	(default for Win32:
  			     "@,48-57,/,\,.,-,_,+,,,#,$,%,{,},[,],:,@-@,!,~,="
  			    for AMIGA: "@,48-57,/,.,-,_,+,,,$,:"
  			    for VMS: "@,48-57,/,.,-,_,+,,,#,$,%,<,>,[,],:,;,~"
***************
*** 4496,4502 ****
  	See |option-backslash| about including spaces and backslashes.
  
  						*'isident'* *'isi'*
! 'isident' 'isi'		string	(default for MS-DOS, Win32 and OS/2:
  					   "@,48-57,_,128-167,224-235"
  				otherwise: "@,48-57,_,192-255")
  			global
--- 4496,4502 ----
  	See |option-backslash| about including spaces and backslashes.
  
  						*'isident'* *'isi'*
! 'isident' 'isi'		string	(default for Win32:
  					   "@,48-57,_,128-167,224-235"
  				otherwise: "@,48-57,_,192-255")
  			global
***************
*** 4510,4516 ****
  	expand "$HOME/.viminfo".  Maybe you should change 'iskeyword' instead.
  
  						*'iskeyword'* *'isk'*
! 'iskeyword' 'isk'	string (Vim default for MS-DOS and Win32:
  					    "@,48-57,_,128-167,224-235"
  				   otherwise:  "@,48-57,_,192-255"
  				Vi default: "@,48-57,_")
--- 4510,4516 ----
  	expand "$HOME/.viminfo".  Maybe you should change 'iskeyword' instead.
  
  						*'iskeyword'* *'isk'*
! 'iskeyword' 'isk'	string (Vim default for Win32:
  					    "@,48-57,_,128-167,224-235"
  				   otherwise:  "@,48-57,_,192-255"
  				Vi default: "@,48-57,_")
***************
*** 4530,4536 ****
  	set and to the Vim default value when 'compatible' is reset.
  
  						*'isprint'* *'isp'*
! 'isprint' 'isp'	string	(default for MS-DOS, Win32, OS/2 and Macintosh:
  				"@,~-255"; otherwise: "@,161-255")
  			global
  	The characters given by this option are displayed directly on the
--- 4530,4536 ----
  	set and to the Vim default value when 'compatible' is reset.
  
  						*'isprint'* *'isp'*
! 'isprint' 'isp'	string	(default for Win32 and Macintosh:
  				"@,~-255"; otherwise: "@,161-255")
  			global
  	The characters given by this option are displayed directly on the
***************
*** 5484,5490 ****
  			    *'opendevice'* *'odev'* *'noopendevice'* *'noodev'*
  'opendevice' 'odev'	boolean	(default off)
  			global
! 			{only for MS-DOS, MS-Windows and OS/2}
  	Enable reading and writing from devices.  This may get Vim stuck on a
  	device that can be opened but doesn't actually do the I/O.  Therefore
  	it is off by default.
--- 5484,5490 ----
  			    *'opendevice'* *'odev'* *'noopendevice'* *'noodev'*
  'opendevice' 'odev'	boolean	(default off)
  			global
! 			{only for MS-Windows}
  	Enable reading and writing from devices.  This may get Vim stuck on a
  	device that can be opened but doesn't actually do the I/O.  Therefore
  	it is off by default.
***************
*** 5616,5622 ****
  
  				*'path'* *'pa'* *E343* *E345* *E347* *E854*
  'path' 'pa'		string	(default on Unix: ".,/usr/include,,"
- 				   on OS/2:	  ".,/emx/include,,"
  				   other systems: ".,,")
  			global or local to buffer |global-local|
  	This is a list of directories which will be searched when using the
--- 5616,5621 ----
***************
*** 6195,6201 ****
  						$VIMRUNTIME,
  						$VIM/vimfiles/after,
  						home:vimfiles/after"
! 					PC, OS/2: "$HOME/vimfiles,
  						$VIM/vimfiles,
  						$VIMRUNTIME,
  						$VIM/vimfiles/after,
--- 6194,6200 ----
  						$VIMRUNTIME,
  						$VIM/vimfiles/after,
  						home:vimfiles/after"
! 					PC:    "$HOME/vimfiles,
  						$VIM/vimfiles,
  						$VIMRUNTIME,
  						$VIM/vimfiles/after,
***************
*** 6465,6471 ****
  						*'shell'* *'sh'* *E91*
  'shell' 'sh'		string	(default $SHELL or "sh",
  					MS-DOS and Win32: "command.com" or
! 					"cmd.exe", OS/2: "cmd")
  			global
  	Name of the shell to use for ! and :! commands.  When changing the
  	value also check these options: 'shelltype', 'shellpipe', 'shellslash'
--- 6464,6470 ----
  						*'shell'* *'sh'* *E91*
  'shell' 'sh'		string	(default $SHELL or "sh",
  					MS-DOS and Win32: "command.com" or
! 					"cmd.exe")
  			global
  	Name of the shell to use for ! and :! commands.  When changing the
  	value also check these options: 'shelltype', 'shellpipe', 'shellslash'
***************
*** 6592,6598 ****
  			*'shellslash'* *'ssl'* *'noshellslash'* *'nossl'*
  'shellslash' 'ssl'	boolean	(default off)
  			global
! 			{only for MSDOS, MS-Windows and OS/2}
  	When set, a forward slash is used when expanding file names.  This is
  	useful when a Unix-like shell is used instead of command.com or
  	cmd.exe.  Backward slashes can still be typed, but they are changed to
--- 6591,6597 ----
  			*'shellslash'* *'ssl'* *'noshellslash'* *'nossl'*
  'shellslash' 'ssl'	boolean	(default off)
  			global
! 			{only for MS-Windows}
  	When set, a forward slash is used when expanding file names.  This is
  	useful when a Unix-like shell is used instead of command.com or
  	cmd.exe.  Backward slashes can still be typed, but they are changed to
***************
*** 7668,7674 ****
  					  on Mac: "mac-ansi"
  					 on MiNT: "vt52"
  				       on MS-DOS: "pcterm"
- 					 on OS/2: "os2ansi"
  					 on Unix: "ansi"
  					  on VMS: "ansi"
  				       on Win 32: "win32")
--- 7667,7672 ----
***************
*** 7827,7833 ****
  	set and to the Vim default value when 'compatible' is reset.
  
  				   *'textmode'* *'tx'* *'notextmode'* *'notx'*
! 'textmode' 'tx'		boolean	(MS-DOS, Win32 and OS/2: default on,
  				 others: default off)
  			local to buffer
  	This option is obsolete.  Use 'fileformat'.
--- 7825,7831 ----
  	set and to the Vim default value when 'compatible' is reset.
  
  				   *'textmode'* *'tx'* *'notextmode'* *'notx'*
! 'textmode' 'tx'		boolean	(Win32: default on,
  				 others: default off)
  			local to buffer
  	This option is obsolete.  Use 'fileformat'.
***************
*** 8215,8222 ****
  	NOTE: This option is reset when 'compatible' is set.
  
  						*'undolevels'* *'ul'*
! 'undolevels' 'ul'	number	(default 100, 1000 for Unix, VMS,
! 						Win32 and OS/2)
  			global or local to buffer |global-local|
  	Maximum number of changes that can be undone.  Since undo information
  	is kept in memory, higher numbers will cause more memory to be used.
--- 8213,8219 ----
  	NOTE: This option is reset when 'compatible' is set.
  
  						*'undolevels'* *'ul'*
! 'undolevels' 'ul'	number	(default 100, 1000 for Unix, VMS, Win32)
  			global or local to buffer |global-local|
  	Maximum number of changes that can be undone.  Since undo information
  	is kept in memory, higher numbers will cause more memory to be used.
***************
*** 8343,8349 ****
  	displayed when 'verbosefile' is set.
  
  						*'viewdir'* *'vdir'*
! 'viewdir' 'vdir'	string	(default for Amiga, MS-DOS, OS/2 and Win32:
  							 "$VIM/vimfiles/view",
  				 for Unix: "~/.vim/view",
  				 for Macintosh: "$VIM:vimfiles:view"
--- 8340,8346 ----
  	displayed when 'verbosefile' is set.
  
  						*'viewdir'* *'vdir'*
! 'viewdir' 'vdir'	string	(default for Amiga and Win32:
  							 "$VIM/vimfiles/view",
  				 for Unix: "~/.vim/view",
  				 for Macintosh: "$VIM:vimfiles:view"
***************
*** 8373,8388 ****
  	   slash	backslashes in file names replaced with forward
  			slashes
  	   unix		with Unix end-of-line format (single <NL>), even when
! 			on Windows or DOS
  	   curdir	the window-local directory, if set with `:lcd`
  
! 	"slash" and "unix" are useful on Windows when sharing view files
  	with Unix.  The Unix version of Vim cannot source dos format scripts,
! 	but the Windows version of Vim can source unix format scripts.
  
  				*'viminfo'* *'vi'* *E526* *E527* *E528*
! 'viminfo' 'vi'		string	(Vi default: "", Vim default for MS-DOS,
! 				   Windows and OS/2: '100,<50,s10,h,rA:,rB:,
  				   for Amiga: '100,<50,s10,h,rdf0:,rdf1:,rdf2:
  				   for others: '100,<50,s10,h)
  			global
--- 8370,8385 ----
  	   slash	backslashes in file names replaced with forward
  			slashes
  	   unix		with Unix end-of-line format (single <NL>), even when
! 			on MS-Windows
  	   curdir	the window-local directory, if set with `:lcd`
  
! 	"slash" and "unix" are useful on MS-Windows when sharing view files
  	with Unix.  The Unix version of Vim cannot source dos format scripts,
! 	but the MS-Windows version of Vim can source unix format scripts.
  
  				*'viminfo'* *'vi'* *E526* *E527* *E528*
! 'viminfo' 'vi'		string	(Vi default: "", Vim default for
! 				   MS-Windows: '100,<50,s10,h,rA:,rB:,
  				   for Amiga: '100,<50,s10,h,rdf0:,rdf1:,rdf2:
  				   for others: '100,<50,s10,h)
  			global
*** ../vim-8.2.0016/runtime/doc/print.txt	2019-12-12 12:49:06.000000000 +0100
--- runtime/doc/print.txt	2019-12-17 21:20:12.564018337 +0100
***************
*** 1,4 ****
! *print.txt*     For Vim version 8.2.  Last change: 2019 May 05
  
  
  		  VIM REFERENCE MANUAL    by Bram Moolenaar
--- 1,4 ----
! *print.txt*     For Vim version 8.2.  Last change: 2019 Dec 17
  
  
  		  VIM REFERENCE MANUAL    by Bram Moolenaar
***************
*** 94,100 ****
  
  							*penc-option* *E620*
  'printencoding' 'penc'	String	(default empty, except for:
! 					Windows, OS/2: cp1252,
  					Macintosh: mac-roman,
  					VMS: dec-mcs,
  					HPUX: hp-roman8,
--- 94,100 ----
  
  							*penc-option* *E620*
  'printencoding' 'penc'	String	(default empty, except for:
! 					MS-Windows: cp1252,
  					Macintosh: mac-roman,
  					VMS: dec-mcs,
  					HPUX: hp-roman8,
***************
*** 124,130 ****
  Four print character encoding files are provided to support default Mac, VMS,
  HPUX, and EBCDIC character encodings and are used by default on these
  platforms.  Code page 1252 print character encoding is used by default on
! Windows and OS/2 platforms.
  
  							*pexpr-option*
  'printexpr' 'pexpr'	String	(default: see below)
--- 124,130 ----
  Four print character encoding files are provided to support default Mac, VMS,
  HPUX, and EBCDIC character encodings and are used by default on these
  platforms.  Code page 1252 print character encoding is used by default on
! MS-Windows platform.
  
  							*pexpr-option*
  'printexpr' 'pexpr'	String	(default: see below)
***************
*** 142,149 ****
      system('lpr' . (&printdevice == '' ? '' : ' -P' . &printdevice)
  	. ' ' . v:fname_in) . delete(v:fname_in) + v:shell_error
  
! On MS-Dos, MS-Windows and OS/2 machines the default is to copy the file to the
! currently specified printdevice: >
  
      system('copy' . ' ' . v:fname_in . (&printdevice == ''
  		? ' LPT1:' : (' \"' . &printdevice . '\"')))
--- 142,149 ----
      system('lpr' . (&printdevice == '' ? '' : ' -P' . &printdevice)
  	. ' ' . v:fname_in) . delete(v:fname_in) + v:shell_error
  
! On MS-Windows machines the default is to copy the file to the currently
! specified printdevice: >
  
      system('copy' . ' ' . v:fname_in . (&printdevice == ''
  		? ' LPT1:' : (' \"' . &printdevice . '\"')))
***************
*** 621,627 ****
  
      http://wwwthep.physik.uni-mainz.de/~plass/gv/
  
! Windows and OS/2
  
  - GSview.  Obtainable from:
  
--- 621,627 ----
  
      http://wwwthep.physik.uni-mainz.de/~plass/gv/
  
! MS-Windows
  
  - GSview.  Obtainable from:
  
***************
*** 636,642 ****
  
  Linux
  
! - GSview.  Linux version of the popular Windows and OS/2 previewer.
    Obtainable from:
  
      http://www.cs.wisc.edu/~ghost/gsview/
--- 636,642 ----
  
  Linux
  
! - GSview.  Linux version of the popular MS-Windows.
    Obtainable from:
  
      http://www.cs.wisc.edu/~ghost/gsview/
*** ../vim-8.2.0016/runtime/doc/quickfix.txt	2019-12-12 12:49:06.000000000 +0100
--- runtime/doc/quickfix.txt	2019-12-17 21:13:06.021961252 +0100
***************
*** 935,945 ****
  "$*" can be given multiple times, for example: >
     :set makeprg=gcc\ -o\ $*\ $*
  
! The 'shellpipe' option defaults to ">" for the Amiga, MS-DOS and Win32.  This
! means that the output of the compiler is saved in a file and not shown on the
! screen directly.  For Unix "| tee" is used.  The compiler output is shown on
! the screen and saved in a file the same time.  Depending on the shell used
! "|& tee" or "2>&1| tee" is the default, so stderr output will be included.
  
  If 'shellpipe' is empty, the {errorfile} part will be omitted.  This is useful
  for compilers that write to an errorfile themselves (e.g., Manx's Amiga C).
--- 935,945 ----
  "$*" can be given multiple times, for example: >
     :set makeprg=gcc\ -o\ $*\ $*
  
! The 'shellpipe' option defaults to ">" for the Amiga and Win32.  This means
! that the output of the compiler is saved in a file and not shown on the screen
! directly.  For Unix "| tee" is used.  The compiler output is shown on the
! screen and saved in a file the same time.  Depending on the shell used "|&
! tee" or "2>&1| tee" is the default, so stderr output will be included.
  
  If 'shellpipe' is empty, the {errorfile} part will be omitted.  This is useful
  for compilers that write to an errorfile themselves (e.g., Manx's Amiga C).
***************
*** 1384,1392 ****
  following the rest of the line is matched.  If "%f" is followed by a '%' or a
  backslash, it will look for a sequence of 'isfname' characters.
  
! On MS-DOS, MS-Windows and OS/2 a leading "C:" will be included in "%f", even
! when using "%f:".  This means that a file name which is a single alphabetical
! letter will not be detected.
  
  The "%p" conversion is normally followed by a "^".  It's used for compilers
  that output a line like: >
--- 1384,1392 ----
  following the rest of the line is matched.  If "%f" is followed by a '%' or a
  backslash, it will look for a sequence of 'isfname' characters.
  
! On MS-Windows a leading "C:" will be included in "%f", even when using "%f:".
! This means that a file name which is a single alphabetical letter will not be
! detected.
  
  The "%p" conversion is normally followed by a "^".  It's used for compilers
  that output a line like: >
*** ../vim-8.2.0016/runtime/doc/repeat.txt	2019-12-12 12:49:06.000000000 +0100
--- runtime/doc/repeat.txt	2019-12-17 21:13:06.021961252 +0100
***************
*** 414,426 ****
  the <t_xx> termcap codes, these can only be used in mappings.
  
  							*:source_crnl* *W15*
! MS-DOS, Win32 and OS/2: Files that are read with ":source" normally have
! <CR><NL> <EOL>s.  These always work.  If you are using a file with <NL> <EOL>s
! (for example, a file made on Unix), this will be recognized if 'fileformats'
! is not empty and the first line does not end in a <CR>.  This fails if the
! first line has something like ":map <F1> :help^M", where "^M" is a <CR>.  If
! the first line ends in a <CR>, but following ones don't, you will get an error
! message, because the <CR> from the first lines will be lost.
  
  Mac Classic: Files that are read with ":source" normally have <CR> <EOL>s.
  These always work.  If you are using a file with <NL> <EOL>s (for example, a
--- 414,426 ----
  the <t_xx> termcap codes, these can only be used in mappings.
  
  							*:source_crnl* *W15*
! Win32: Files that are read with ":source" normally have <CR><NL> <EOL>s.
! These always work.  If you are using a file with <NL> <EOL>s (for example, a
! file made on Unix), this will be recognized if 'fileformats' is not empty and
! the first line does not end in a <CR>.  This fails if the first line has
! something like ":map <F1> :help^M", where "^M" is a <CR>.  If the first line
! ends in a <CR>, but following ones don't, you will get an error message,
! because the <CR> from the first lines will be lost.
  
  Mac Classic: Files that are read with ":source" normally have <CR> <EOL>s.
  These always work.  If you are using a file with <NL> <EOL>s (for example, a
*** ../vim-8.2.0016/runtime/doc/starting.txt	2019-12-12 12:49:06.000000000 +0100
--- runtime/doc/starting.txt	2019-12-17 21:13:06.021961252 +0100
***************
*** 784,791 ****
  
  	Places for your personal initializations:
  		Unix		$HOME/.vimrc or $HOME/.vim/vimrc
- 		OS/2		$HOME/.vimrc, $HOME/vimfiles/vimrc
- 				or $VIM/.vimrc (or _vimrc)
  		MS-Windows	$HOME/_vimrc, $HOME/vimfiles/vimrc
  				or $VIM/_vimrc
  		Amiga		s:.vimrc, home:.vimrc, home:vimfiles:vimrc
--- 784,789 ----
***************
*** 811,817 ****
       a. If vim was started as |evim| or |eview| or with the |-y| argument, the
  	script $VIMRUNTIME/evim.vim will be loaded.
  							*system-vimrc*
!      b. For Unix, MS-DOS, MS-Windows, OS/2, VMS, Macintosh, RISC-OS and Amiga
  	the system vimrc file is read for initializations.  The path of this
  	file is shown with the ":version" command.  Mostly it's "$VIM/vimrc".
  	Note that this file is ALWAYS read in 'compatible' mode, since the
--- 809,815 ----
       a. If vim was started as |evim| or |eview| or with the |-y| argument, the
  	script $VIMRUNTIME/evim.vim will be loaded.
  							*system-vimrc*
!      b. For Unix, MS-Windows, VMS, Macintosh, RISC-OS and Amiga
  	the system vimrc file is read for initializations.  The path of this
  	file is shown with the ":version" command.  Mostly it's "$VIM/vimrc".
  	Note that this file is ALWAYS read in 'compatible' mode, since the
***************
*** 827,848 ****
  	I   The environment variable VIMINIT (see also |compatible-default|) (*)
  	    The value of $VIMINIT is used as an Ex command line.
  	II  The user vimrc file(s):
! 		    "$HOME/.vimrc"	   (for Unix and OS/2) (*)
! 		    "$HOME/.vim/vimrc"	   (for Unix and OS/2) (*)
  		    "s:.vimrc"		   (for Amiga) (*)
  		    "home:.vimrc"	   (for Amiga) (*)
  		    "home:vimfiles:vimrc"  (for Amiga) (*)
! 		    "$VIM/.vimrc"	   (for OS/2 and Amiga) (*)
! 		    "$HOME/_vimrc"	   (for MS-DOS and Win32) (*)
! 		    "$HOME/vimfiles/vimrc" (for MS-DOS and Win32) (*)
! 		    "$VIM/_vimrc"	   (for MS-DOS and Win32) (*)
! 		Note: For Unix, OS/2 and Amiga, when ".vimrc" does not exist,
  		"_vimrc" is also tried, in case an MS-DOS compatible file
! 		system is used.  For MS-DOS and Win32 ".vimrc" is checked
! 		after "_vimrc", in case long file names are used.
! 		Note: For MS-DOS and Win32, "$HOME" is checked first.  If no
! 		"_vimrc" or ".vimrc" is found there, "$VIM" is tried.
! 		See |$VIM| for when $VIM is not set.
  	III The environment variable EXINIT.
  	    The value of $EXINIT is used as an Ex command line.
  	IV  The user exrc file(s).  Same as for the user vimrc file, but with
--- 825,846 ----
  	I   The environment variable VIMINIT (see also |compatible-default|) (*)
  	    The value of $VIMINIT is used as an Ex command line.
  	II  The user vimrc file(s):
! 		    "$HOME/.vimrc"	   (for Unix) (*)
! 		    "$HOME/.vim/vimrc"	   (for Unix) (*)
  		    "s:.vimrc"		   (for Amiga) (*)
  		    "home:.vimrc"	   (for Amiga) (*)
  		    "home:vimfiles:vimrc"  (for Amiga) (*)
! 		    "$VIM/.vimrc"	   (for Amiga) (*)
! 		    "$HOME/_vimrc"	   (for Win32) (*)
! 		    "$HOME/vimfiles/vimrc" (for Win32) (*)
! 		    "$VIM/_vimrc"	   (for Win32) (*)
! 		Note: For Unix and Amiga, when ".vimrc" does not exist,
  		"_vimrc" is also tried, in case an MS-DOS compatible file
! 		system is used.  For MS-Windows ".vimrc" is checked after
! 		"_vimrc", in case long file names are used.
! 		Note: For Win32, "$HOME" is checked first.  If no "_vimrc" or
! 		".vimrc" is found there, "$VIM" is tried.  See |$VIM| for when
! 		$VIM is not set.
  	III The environment variable EXINIT.
  	    The value of $EXINIT is used as an Ex command line.
  	IV  The user exrc file(s).  Same as for the user vimrc file, but with
***************
*** 855,866 ****
       d. If the 'exrc' option is on (which is NOT the default), the current
  	directory is searched for three files.  The first that exists is used,
  	the others are ignored.
! 	-  The file ".vimrc" (for Unix, Amiga and OS/2) (*)
! 		    "_vimrc" (for MS-DOS and Win32) (*)
! 	-  The file "_vimrc" (for Unix, Amiga and OS/2) (*)
! 		    ".vimrc" (for MS-DOS and Win32) (*)
! 	-  The file ".exrc"  (for Unix, Amiga and OS/2)
! 		    "_exrc"  (for MS-DOS and Win32)
  
       (*) Using this file or environment variable will cause 'compatible' to be
  	 off by default.  See |compatible-default|.
--- 853,864 ----
       d. If the 'exrc' option is on (which is NOT the default), the current
  	directory is searched for three files.  The first that exists is used,
  	the others are ignored.
! 	-  The file ".vimrc" (for Unix, Amiga) (*)
! 		    "_vimrc" (for Win32) (*)
! 	-  The file "_vimrc" (for Unix, Amiga) (*)
! 		    ".vimrc" (for Win32) (*)
! 	-  The file ".exrc"  (for Unix, Amiga)
! 		    "_exrc"  (for Win32)
  
       (*) Using this file or environment variable will cause 'compatible' to be
  	 off by default.  See |compatible-default|.
***************
*** 948,956 ****
  Standard setup:
  Create a vimrc file to set the default settings and mappings for all your edit
  sessions.  Put it in a place so that it will be found by 3b:
! 	~/.vimrc	(Unix and OS/2)
  	s:.vimrc	(Amiga)
! 	$VIM\_vimrc	(MS-DOS and Win32)
  Note that creating a vimrc file will cause the 'compatible' option to be off
  by default.  See |compatible-default|.
  
--- 946,954 ----
  Standard setup:
  Create a vimrc file to set the default settings and mappings for all your edit
  sessions.  Put it in a place so that it will be found by 3b:
! 	~/.vimrc	(Unix)
  	s:.vimrc	(Amiga)
! 	$VIM\_vimrc	(Win32)
  Note that creating a vimrc file will cause the 'compatible' option to be off
  by default.  See |compatible-default|.
  
***************
*** 990,999 ****
  
  MS-DOS line separators ~
  
! On MS-DOS-like systems (MS-DOS itself, Win32, and OS/2), Vim assumes that all
! the vimrc files have <CR> <NL> pairs as line separators.  This will give
! problems if you have a file with only <NL>s and have a line like
! ":map xx yy^M".  The trailing ^M will be ignored.
  
  
  Vi compatible default value ~
--- 988,996 ----
  
  MS-DOS line separators ~
  
! On MS-Windows, Vim assumes that all the vimrc files have <CR> <NL> pairs as
! line separators.  This will give problems if you have a file with only <NL>s
! and have a line like ":map xx yy^M".  The trailing ^M will be ignored.
  
  
  Vi compatible default value ~
***************
*** 1145,1155 ****
     problem).  The file name ("help.txt" or any other) is removed.  Then
     trailing directory names are removed, in this order: "doc", "runtime" and
     "vim{version}" (e.g., "vim54").
! 3. For MSDOS, Win32 and OS/2 Vim tries to use the directory name of the
!    executable.  If it ends in "/src", this is removed.  This is useful if you
!    unpacked the .zip file in some directory, and adjusted the search path to
!    find the vim executable.  Trailing directory names are removed, in this
!    order: "runtime" and "vim{version}" (e.g., "vim54").
  4. For Unix the compile-time defined installation directory is used (see the
     output of ":version").
  
--- 1142,1152 ----
     problem).  The file name ("help.txt" or any other) is removed.  Then
     trailing directory names are removed, in this order: "doc", "runtime" and
     "vim{version}" (e.g., "vim54").
! 3. For Win32 Vim tries to use the directory name of the executable.  If it
!    ends in "/src", this is removed.  This is useful if you unpacked the .zip
!    file in some directory, and adjusted the search path to find the vim
!    executable.  Trailing directory names are removed, in this order: "runtime"
!    and "vim{version}" (e.g., "vim54").
  4. For Unix the compile-time defined installation directory is used (see the
     output of ":version").
  
***************
*** 1573,1583 ****
  
  VIMINFO FILE NAME					*viminfo-file-name*
  
! - The default name of the viminfo file is "$HOME/.viminfo" for Unix and OS/2,
!   "s:.viminfo" for Amiga, "$HOME\_viminfo" for MS-DOS and Win32.  For the last
!   two, when $HOME is not set, "$VIM\_viminfo" is used.  When $VIM is also not
!   set, "c:\_viminfo" is used.  For OS/2 "$VIM/.viminfo" is used when $HOME is
!   not set and $VIM is set.
  - The 'n' flag in the 'viminfo' option can be used to specify another viminfo
    file name |'viminfo'|.
  - The "-i" Vim argument can be used to set another file name, |-i|.  When the
--- 1570,1579 ----
  
  VIMINFO FILE NAME					*viminfo-file-name*
  
! - The default name of the viminfo file is "$HOME/.viminfo" for Unix,
!   "s:.viminfo" for Amiga, "$HOME\_viminfo" for Win32.  For the last two, when
!   $HOME is not set, "$VIM\_viminfo" is used.  When $VIM is also not set,
!   "c:\_viminfo" is used.
  - The 'n' flag in the 'viminfo' option can be used to specify another viminfo
    file name |'viminfo'|.
  - The "-i" Vim argument can be used to set another file name, |-i|.  When the
*** ../vim-8.2.0016/runtime/doc/usr_01.txt	2019-12-12 12:49:06.000000000 +0100
--- runtime/doc/usr_01.txt	2019-12-17 21:13:06.021961252 +0100
***************
*** 71,77 ****
  
  Unix: >
  	:!cp -i $VIMRUNTIME/vimrc_example.vim ~/.vimrc
! MS-DOS, MS-Windows, OS/2: >
  	:!copy $VIMRUNTIME/vimrc_example.vim $VIM/_vimrc
  Amiga: >
  	:!copy $VIMRUNTIME/vimrc_example.vim $VIM/.vimrc
--- 71,77 ----
  
  Unix: >
  	:!cp -i $VIMRUNTIME/vimrc_example.vim ~/.vimrc
! MS-Windows: >
  	:!copy $VIMRUNTIME/vimrc_example.vim $VIM/_vimrc
  Amiga: >
  	:!copy $VIMRUNTIME/vimrc_example.vim $VIM/.vimrc
*** ../vim-8.2.0016/runtime/doc/usr_05.txt	2019-12-12 12:49:07.000000000 +0100
--- runtime/doc/usr_05.txt	2019-12-17 21:13:06.021961252 +0100
***************
*** 472,478 ****
  
  	system		plugin directory ~
  	Unix		~/.vim/plugin/
! 	PC and OS/2	$HOME/vimfiles/plugin or $VIM/vimfiles/plugin
  	Amiga		s:vimfiles/plugin
  	Macintosh	$VIM:vimfiles:plugin
  	Mac OS X	~/.vim/plugin/
--- 472,478 ----
  
  	system		plugin directory ~
  	Unix		~/.vim/plugin/
! 	PC		$HOME/vimfiles/plugin or $VIM/vimfiles/plugin
  	Amiga		s:vimfiles/plugin
  	Macintosh	$VIM:vimfiles:plugin
  	Mac OS X	~/.vim/plugin/
*** ../vim-8.2.0016/runtime/doc/usr_41.txt	2019-12-12 12:49:07.000000000 +0100
--- runtime/doc/usr_41.txt	2019-12-17 21:21:49.359615376 +0100
***************
*** 1,4 ****
! *usr_41.txt*	For Vim version 8.2.  Last change: 2019 Nov 21
  
  		     VIM USER MANUAL - by Bram Moolenaar
  
--- 1,4 ----
! *usr_41.txt*	For Vim version 8.2.  Last change: 2019 Dec 17
  
  		     VIM USER MANUAL - by Bram Moolenaar
  
***************
*** 1699,1706 ****
  elsewhere, but form a nice checklist.
  
  The end-of-line character depends on the system.  For Unix a single <NL>
! character is used.  For MS-DOS, Windows, OS/2 and the like, <CR><LF> is used.
! This is important when using mappings that end in a <CR>.  See |:source_crnl|.
  
  
  WHITE SPACE
--- 1699,1706 ----
  elsewhere, but form a nice checklist.
  
  The end-of-line character depends on the system.  For Unix a single <NL>
! character is used.  For MS-Windows and the like, <CR><LF> is used.  This is
! important when using mappings that end in a <CR>.  See |:source_crnl|.
  
  
  WHITE SPACE
***************
*** 1885,1891 ****
  by the plugin should be clear from its name.  And it should be unlikely that
  someone else writes a plugin with the same name but which does something
  different.  And please limit the name to 8 characters, to avoid problems on
! old Windows systems.
  
  A script that corrects typing mistakes could be called "typecorr.vim".  We
  will use it here as an example.
--- 1885,1891 ----
  by the plugin should be clear from its name.  And it should be unlikely that
  someone else writes a plugin with the same name but which does something
  different.  And please limit the name to 8 characters, to avoid problems on
! old MS-Windows systems.
  
  A script that corrects typing mistakes could be called "typecorr.vim".  We
  will use it here as an example.
*** ../vim-8.2.0016/runtime/doc/vi_diff.txt	2019-12-12 12:49:07.000000000 +0100
--- runtime/doc/vi_diff.txt	2019-12-17 21:23:02.131318529 +0100
***************
*** 1,4 ****
! *vi_diff.txt*   For Vim version 8.2.  Last change: 2019 Nov 12
  
  
  		  VIM REFERENCE MANUAL    by Bram Moolenaar
--- 1,4 ----
! *vi_diff.txt*   For Vim version 8.2.  Last change: 2019 Dec 17
  
  
  		  VIM REFERENCE MANUAL    by Bram Moolenaar
***************
*** 136,146 ****
  	- All Unix systems (it works on all systems it was tested on, although
  	  the GUI and Perl interface may not work everywhere).
  	- Amiga (500, 1000, 1200, 2000, 3000, 4000, ...).
! 	- MS-DOS in real-mode (no additional drivers required).
! 	- In protected mode on Windows 3.1 and MS-DOS (DPMI driver required).
! 	- Windows 95 and Windows NT, with support for long file names.
! 	- OS/2 (needs emx.dll)
! 	- Atari MiNT
  	- VMS
  	- BeOS
  	- Macintosh
--- 136,142 ----
  	- All Unix systems (it works on all systems it was tested on, although
  	  the GUI and Perl interface may not work everywhere).
  	- Amiga (500, 1000, 1200, 2000, 3000, 4000, ...).
! 	- Windows NT, with support for long file names.
  	- VMS
  	- BeOS
  	- Macintosh
*** ../vim-8.2.0016/runtime/gvimrc_example.vim	2016-04-05 22:03:05.000000000 +0200
--- runtime/gvimrc_example.vim	2019-12-17 21:13:06.021961252 +0100
***************
*** 6,12 ****
  " Last change:	2016 Apr 05
  "
  " To use it, copy it to
! "     for Unix and OS/2:  ~/.gvimrc
  "	      for Amiga:  s:.gvimrc
  "  for MS-DOS and Win32:  $VIM\_gvimrc
  "	    for OpenVMS:  sys$login:.gvimrc
--- 6,12 ----
  " Last change:	2016 Apr 05
  "
  " To use it, copy it to
! "	       for Unix:  ~/.gvimrc
  "	      for Amiga:  s:.gvimrc
  "  for MS-DOS and Win32:  $VIM\_gvimrc
  "	    for OpenVMS:  sys$login:.gvimrc
*** ../vim-8.2.0016/runtime/tools/README.txt	2010-05-15 13:04:00.000000000 +0200
--- runtime/tools/README.txt	2019-12-17 21:13:06.021961252 +0100
***************
*** 34,37 ****
  
  unicode.vim	Vim script to generate tables for src/mbyte.c.
  
! [xxd (and tee for OS/2) can be found in the src directory]
--- 34,37 ----
  
  unicode.vim	Vim script to generate tables for src/mbyte.c.
  
! [xxd can be found in the src directory]
*** ../vim-8.2.0016/runtime/vimrc_example.vim	2019-01-26 20:53:08.000000000 +0100
--- runtime/vimrc_example.vim	2019-12-17 21:24:14.475027911 +0100
***************
*** 1,12 ****
  " An example for a vimrc file.
  "
  " Maintainer:	Bram Moolenaar <Bram@vim.org>
! " Last change:	2019 Jan 26
  "
  " To use it, copy it to
! "     for Unix and OS/2:  ~/.vimrc
  "	      for Amiga:  s:.vimrc
! "  for MS-DOS and Win32:  $VIM\_vimrc
  "	    for OpenVMS:  sys$login:.vimrc
  
  " When started as "evim", evim.vim will already have done these settings, bail
--- 1,12 ----
  " An example for a vimrc file.
  "
  " Maintainer:	Bram Moolenaar <Bram@vim.org>
! " Last change:	2019 Dec 17
  "
  " To use it, copy it to
! "	       for Unix:  ~/.vimrc
  "	      for Amiga:  s:.vimrc
! "	 for MS-Windows:  $VIM\_vimrc
  "	    for OpenVMS:  sys$login:.vimrc
  
  " When started as "evim", evim.vim will already have done these settings, bail
*** ../vim-8.2.0016/src/feature.h	2019-12-01 15:23:54.000000000 +0100
--- src/feature.h	2019-12-17 21:13:06.021961252 +0100
***************
*** 944,950 ****
   *			Always included, since either FEAT_MOUSE_XTERM or
   *			DOS_MOUSE is defined.
   */
! // OS/2 and Amiga console have no mouse support
  #if defined(UNIX) || defined(VMS)
  # define FEAT_MOUSE_XTERM
  # ifdef FEAT_BIG
--- 944,950 ----
   *			Always included, since either FEAT_MOUSE_XTERM or
   *			DOS_MOUSE is defined.
   */
! // Amiga console has no mouse support
  #if defined(UNIX) || defined(VMS)
  # define FEAT_MOUSE_XTERM
  # ifdef FEAT_BIG
*** ../vim-8.2.0016/src/version.c	2019-12-17 20:29:22.950959030 +0100
--- src/version.c	2019-12-17 21:14:46.969469283 +0100
***************
*** 744,745 ****
--- 744,747 ----
  {   /* Add new patch number below this line */
+ /**/
+     17,
  /**/

-- 
       When danger reared its ugly head,
       He bravely turned his tail and fled
       Yes, Brave Sir Robin turned about
       And gallantly he chickened out
       Bravely taking to his feet
       He beat a very brave retreat
       Bravest of the brave Sir Robin
       Petrified of being dead
       Soiled his pants then brave Sir Robin
       Turned away and fled.
                 "Monty Python and the Holy Grail" PYTHON (MONTY) PICTURES LTD

 /// Bram Moolenaar -- Bram@Moolenaar.net -- http://www.Moolenaar.net   \\\
///        sponsor Vim, vote for features -- http://www.Vim.org/sponsor/ \\\
\\\  an exciting new programming language -- http://www.Zimbu.org        ///
 \\\            help me help AIDS victims -- http://ICCF-Holland.org    ///
