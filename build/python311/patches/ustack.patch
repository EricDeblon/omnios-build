commit 0a6845622b191a67a362b5eb42e652e27361f573
Author: Andy Fiddaman <illumos@fiddaman.net>
Date:   Sat Nov 26 22:54:03 2022 +0000

    Python: Add dtrace ustack helper
    
    Python acquired native dtrace support in version 3.6, but without the
    ustack helper that annotates stack traces with information about the
    python function being called.
    
    This restores the ustack helper and is based on Sun's original dtrace
    patches.
    
    Some more information on the original work can be found at:
    https://movementarian.org/blog/posts/2007-05-24-python-and-dtrace-in-build-65

diff --git a/Include/dtrace.cpp.sh b/Include/dtrace.cpp.sh
new file mode 100755
index 0000000000..5ec7c3c94f
--- /dev/null
+++ b/Include/dtrace.cpp.sh
@@ -0,0 +1,15 @@
+#!/bin/bash
+
+# A cpp wrapper used by the dtrace compiler that strips //-style comments
+# and static inline functions
+
+op=${@: -1}
+args=${@:1:$#-1}
+
+/usr/lib/cpp $args | sed '
+	s^//.*^^
+	/^.*static inline .*/,/^}/d
+	/^$/d
+	/PYGEN_NEXT = 1,/s/,//
+' >> $op
+
diff --git a/Include/object.h b/Include/object.h
index f2af428e2b..f7c8da28e7 100644
--- a/Include/object.h
+++ b/Include/object.h
@@ -76,9 +76,11 @@ whose size is determined when the object is allocated.
 /* PyObject_HEAD defines the initial segment of every PyObject. */
 #define PyObject_HEAD                   PyObject ob_base;
 
+#ifndef PYDTRACE_STACK_HELPER
 #define PyObject_HEAD_INIT(type)        \
     { _PyObject_EXTRA_INIT              \
     1, type },
+#endif
 
 #define PyVarObject_HEAD_INIT(type, size)       \
     { PyObject_HEAD_INIT(type) size },
diff --git a/Include/pydtrace.d b/Include/pydtrace.d
index 5e6a626b01..ccf22b8fac 100644
--- a/Include/pydtrace.d
+++ b/Include/pydtrace.d
@@ -20,3 +20,138 @@ provider python {
 #pragma D attributes Evolving/Evolving/Common provider python function
 #pragma D attributes Evolving/Evolving/Common provider python name
 #pragma D attributes Evolving/Evolving/Common provider python args
+
+#ifdef PYDTRACE_STACK_HELPER
+/*
+ * Python ustack helper.  This relies on the first argument (PyFrame *) being
+ * on the stack; see Python/ceval.c for the contortions we go through to ensure
+ * this is the case.
+ *
+ * On x86, the PyFrame * is two slots up from the frame pointer.
+ *
+ * Some details about this in "Python and DTrace in build 65":
+ * https://movementarian.org/blog/posts/2007-05-24-python-and-dtrace-in-build-65
+ */
+
+#include "pyconfig.h"
+#undef _POSIX_PTHREAD_SEMANTICS
+
+#include <stdio.h>
+#include <sys/types.h>
+
+#define Py_EXPORTS_H
+#define Py_IMPORTED_SYMBOL
+#define Py_EXPORTED_SYMBOL
+#define Py_LOCAL_SYMBOL
+
+#define string	stringDTRACE
+
+#include "pyport.h"
+#include "pymacro.h"
+#include "pytypedefs.h"
+#include "pybuffer.h"
+#include "object.h"
+
+#undef self
+#undef string
+
+#include "pydtrace_offsets.h"
+#include "pydtrace_symbols.h"
+
+#define startframe _PyEval_EvalFrameDefaultReal
+#define endframe PYDTRACE_AFTER__PyEval_EvalFrameDefaultReal
+
+extern uintptr_t startframe;
+extern uintptr_t endframe;
+
+#define at_evalframe(addr) \
+    ((uintptr_t)addr >= ((uintptr_t)&``startframe) && \
+     (uintptr_t)addr < ((uintptr_t)&``endframe))
+
+#define frame_ptr_addr ((uintptr_t)arg1 + sizeof(uintptr_t) * 2)
+#define copyin_obj(addr, obj) ((obj *)copyin((uintptr_t)(addr), sizeof(obj)))
+
+/*
+** Check if the string is ASCII. Don't use bitfields, because the
+** packing in GCC and D are different. BEWARE!!!.
+*/
+#define pystr_isascii(addr) \
+    ((*(((char *)addr) + PYDTRACE_ASCII_OFFSET)) & PYDTRACE_ASCII_MASK)
+#define pystr_len(addr) \
+    (pystr_isascii(addr) ? (addr)->_base.length : \
+    *(Py_ssize_t *)(((char *)(addr)) + PYDTRACE_UTF8_LENGTH_OFFSET))
+#define pystr_addr(addr, addr2) \
+    (pystr_isascii(addr) ? \
+    (char *)(((char *)(addr2)) + PYDTRACE_PyASCIIObject_SIZE) : \
+    (char *)*(uintptr_t *)(((char *)(addr)) + PYDTRACE_UTF8_OFFSET))
+
+#define add_digit(nr, div) (((nr) / div) ? \
+    (this->result[this->pos++] = '0' + (((nr) / div) % 10)) : \
+    (this->result[this->pos] = '\0'))
+#define add_char(c) \
+    (this->result[this->pos++] = c)
+
+dtrace:helper:ustack: /at_evalframe(arg0)/
+{
+	this->framep = *(uintptr_t *)copyin(frame_ptr_addr, sizeof(uintptr_t));
+	this->frameo = copyin_obj(this->framep, struct _frame);
+	this->codep = this->frameo->f_code;
+	this->codeo = copyin_obj(this->codep, PyCodeObject);
+	this->addr = this->frameo->f_lasti;
+
+	/* See pycode_code.h:_PyCode_LineNumberFromArray */
+	this->lineno = this->codeo->_co_linearray_entry_size == 2 ?
+	    *copyin_obj(((int16_t *)this->codeo->_co_linearray)[addr], int16_t)
+	    :
+	    *copyin_obj(((int32_t *)this->codeo->_co_linearray)[addr], int32_t)
+	    ;
+
+/*
+	this->lineno = this->codeo->co_firstlineno +
+	    (this->frameo->f_lasti == -1 ? 0 :
+	        *copyin_obj(this->codeo->co_linenos + this->frameo->f_lasti,
+		unsigned short));
+*/
+	this->filenameo = copyin_obj(this->codeo->co_filename,
+	    PyCompactUnicodeObject);
+	this->nameo = copyin_obj(this->codeo->co_name, PyCompactUnicodeObject);
+
+	this->len_filename = pystr_len(this->filenameo);
+	this->len_name = pystr_len(this->nameo);
+
+	this->len = 1 + this->len_filename + 1 + 5 + 2 + this->len_name + 1 + 1;
+
+	this->result = (char *)alloca(this->len);
+	this->pos = 0;
+	add_char('@');
+
+	copyinto(
+	    (uintptr_t)pystr_addr(this->filenameo, this->codeo->co_filename),
+	    this->len_filename, this->result + this->pos);
+	this->pos += this->len_filename;
+
+	add_char(':');
+	add_digit(this->lineno, 10000);
+	add_digit(this->lineno, 1000);
+	add_digit(this->lineno, 100);
+	add_digit(this->lineno, 10);
+	add_digit(this->lineno, 1);
+	add_char(' ');
+	add_char('(');
+
+	copyinto((uintptr_t)pystr_addr(this->nameo, this->codeo->co_name),
+	    this->len_name, this->result + this->pos);
+	this->pos += this->len_name;
+
+	add_char(')');
+	this->result[this->pos] = '\0';
+	stringof(this->result);
+}
+
+dtrace:helper:ustack: /!at_evalframe(arg0)/
+{
+	NULL
+}
+
+#endif  /* PYDTRACE_STACK_HELPER */
+
diff --git a/Include/pydtrace.h b/Include/pydtrace.h
index 75f8e7f709..7625384c2e 100644
--- a/Include/pydtrace.h
+++ b/Include/pydtrace.h
@@ -25,18 +25,18 @@ extern "C" {
 
 /* Without DTrace, compile to nothing. */
 
-static inline void PyDTrace_LINE(const char *arg0, const char *arg1, int arg2) {}
-static inline void PyDTrace_FUNCTION_ENTRY(const char *arg0, const char *arg1, int arg2)  {}
-static inline void PyDTrace_FUNCTION_RETURN(const char *arg0, const char *arg1, int arg2) {}
+static inline void PyDTrace_LINE(char *arg0, char *arg1, int arg2) {}
+static inline void PyDTrace_FUNCTION_ENTRY(char *arg0, char *arg1, int arg2)  {}
+static inline void PyDTrace_FUNCTION_RETURN(char *arg0, char *arg1, int arg2) {}
 static inline void PyDTrace_GC_START(int arg0) {}
 static inline void PyDTrace_GC_DONE(Py_ssize_t arg0) {}
 static inline void PyDTrace_INSTANCE_NEW_START(int arg0) {}
 static inline void PyDTrace_INSTANCE_NEW_DONE(int arg0) {}
 static inline void PyDTrace_INSTANCE_DELETE_START(int arg0) {}
 static inline void PyDTrace_INSTANCE_DELETE_DONE(int arg0) {}
-static inline void PyDTrace_IMPORT_FIND_LOAD_START(const char *arg0) {}
-static inline void PyDTrace_IMPORT_FIND_LOAD_DONE(const char *arg0, int arg1) {}
-static inline void PyDTrace_AUDIT(const char *arg0, void *arg1) {}
+static inline void PyDTrace_IMPORT_FIND_LOAD_START(char *arg0) {}
+static inline void PyDTrace_IMPORT_FIND_LOAD_DONE(char *arg0, int arg1) {}
+static inline void PyDTrace_AUDIT(char *arg0, void *arg1) {}
 
 static inline int PyDTrace_LINE_ENABLED(void) { return 0; }
 static inline int PyDTrace_FUNCTION_ENTRY_ENABLED(void) { return 0; }
diff --git a/Include/pydtrace_offsets.c b/Include/pydtrace_offsets.c
new file mode 100644
index 0000000000..8cad556c84
--- /dev/null
+++ b/Include/pydtrace_offsets.c
@@ -0,0 +1,34 @@
+#include "Python.h"
+#include "unicodeobject.h"
+#include <stdlib.h>
+#include <stdio.h>
+
+int
+main(int argc, const char **argv)
+{
+	PyCompactUnicodeObject o;
+	unsigned char *p = (unsigned char *)(&o);
+
+	memset(&o, '\0', sizeof(o));
+	o._base.state.ascii = 1;
+	while (*p == '\0')
+		p++;
+
+	printf("/* File auto-generated. DO NOT MODIFY MANUALLY */\n");
+	printf("\n");
+	printf("#ifndef PYDTRACE_OFFSETS_H\n");
+	printf("#define PYDTRACE_OFFSETS_H\n");
+	printf("\n");
+	printf("#define PYDTRACE_ASCII_OFFSET %ld\n",
+	    p - (unsigned char *)(&o));
+	printf("#define PYDTRACE_ASCII_MASK %d\n", *p);
+	printf("#define PYDTRACE_PyASCIIObject_SIZE %ld\n",
+	    sizeof(PyASCIIObject));
+	printf("#define PYDTRACE_UTF8_LENGTH_OFFSET %ld\n",
+	    offsetof(PyCompactUnicodeObject, utf8_length));
+	printf("#define PYDTRACE_UTF8_OFFSET %ld\n",
+	    offsetof(PyCompactUnicodeObject, utf8));
+	printf("\n");
+	printf("#endif\n");
+}
+
diff --git a/Include/pydtrace_symbols.sh b/Include/pydtrace_symbols.sh
new file mode 100755
index 0000000000..5672c2bb18
--- /dev/null
+++ b/Include/pydtrace_symbols.sh
@@ -0,0 +1,15 @@
+#!/bin/ksh
+
+obj=${1:?obj}
+
+# Find the function directly after the one that we want to annotate with
+# the dtrace ustack helper
+
+func=_PyEval_EvalFrameDefaultReal
+sym=`/usr/bin/nm -hgp $obj \
+    | grep ' T ' \
+    | sort -n \
+    | sed -n "/$func\$/{n;s/.* //;p;}"`
+
+echo "#define PYDTRACE_AFTER_$func $sym"
+
diff --git a/Include/pyport.h b/Include/pyport.h
index 93250f4eb1..c8c9074c08 100644
--- a/Include/pyport.h
+++ b/Include/pyport.h
@@ -518,6 +518,7 @@ extern char * _getpty(int *, int, mode_t, int);
 #       define HAVE_DECLSPEC_DLL
 #endif
 
+
 #include "exports.h"
 
 /* only get special linkage if built as shared or platform is Cygwin */
diff --git a/Lib/test/dtracedata/jstack.d b/Lib/test/dtracedata/jstack.d
new file mode 100644
index 0000000000..46855b407c
--- /dev/null
+++ b/Lib/test/dtracedata/jstack.d
@@ -0,0 +1,18 @@
+
+python$target:::function-entry
+/copyinstr(arg1)=="test_stack"/
+{
+    self->trace = 1;
+}
+python$target:::function-entry
+/self->trace/
+{
+    printf("[x]");
+    jstack();
+}
+python$target:::function-return
+/copyinstr(arg1)=="test_stack"/
+{
+    self->trace = 0;
+}
+
diff --git a/Lib/test/dtracedata/jstack.d.expected b/Lib/test/dtracedata/jstack.d.expected
new file mode 100644
index 0000000000..9f1f389df7
--- /dev/null
+++ b/Lib/test/dtracedata/jstack.d.expected
@@ -0,0 +1,21 @@
+[x]
+[PyFile:17(test_stack)]
+[x]
+[PyFile:2(function_1)]
+[PyFile:17(test_stack)]
+[x]
+[PyFile:5(function_2)]
+[PyFile:17(test_stack)]
+[x]
+[PyFile:2(function_1)]
+[PyFile:5(function_2)]
+[PyFile:17(test_stack)]
+[x]
+[PyFile:8(function_3)]
+[PyFile:18(test_stack)]
+[x]
+[PyFile:11(function_4)]
+[PyFile:19(test_stack)]
+[x]
+[PyFile:14(function_5)]
+[PyFile:20(test_stack)]
\ No newline at end of file
diff --git a/Lib/test/dtracedata/jstack.py b/Lib/test/dtracedata/jstack.py
new file mode 100644
index 0000000000..a1584ddf6f
--- /dev/null
+++ b/Lib/test/dtracedata/jstack.py
@@ -0,0 +1,25 @@
+
+def function_1():
+    pass
+
+def function_2():
+    function_1()
+
+def function_3(dummy, dummy2):
+    pass
+
+def function_4(**dummy):
+    pass
+
+def function_5(dummy, dummy2, **dummy3):
+    pass
+
+def test_stack():
+    function_1()
+    function_2()
+    function_3(*(1,2))
+    function_4(**{"test":42})
+    function_5(*(1,2), **{"test":42})
+
+test_stack()
+
diff --git a/Lib/test/dtracedata/unicode-jstack.d b/Lib/test/dtracedata/unicode-jstack.d
new file mode 100644
index 0000000000..c50a8d6785
--- /dev/null
+++ b/Lib/test/dtracedata/unicode-jstack.d
@@ -0,0 +1,18 @@
+
+python$target:::function-entry
+/copyinstr(arg1)=="test_unicode_stack"/
+{
+    self->trace = 1;
+}
+python$target:::function-entry
+/self->trace/
+{
+    printf("[x]");
+    jstack();
+}
+python$target:::function-return
+/copyinstr(arg1)=="test_unicode_stack"/
+{
+    self->trace = 0;
+}
+
diff --git a/Lib/test/dtracedata/unicode-jstack.d.expected b/Lib/test/dtracedata/unicode-jstack.d.expected
new file mode 100644
index 0000000000..9e71506738
--- /dev/null
+++ b/Lib/test/dtracedata/unicode-jstack.d.expected
@@ -0,0 +1,18 @@
+[x]
+[PyFile:8(test_unicode_stack)]
+[x]
+[PyFile:2(function_1)]
+[PyFile:8(test_unicode_stack)]
+[x]
+[PyFile:9(únícódé)]
+[PyFile:9(test_unicode_stack)]
+[x]
+[PyFile:5(function_2)]
+[PyFile:9(únícódé)]
+[PyFile:9(test_unicode_stack)]
+[x]
+[PyFile:2(function_1)]
+[PyFile:5(function_2)]
+[PyFile:9(únícódé)]
+[PyFile:9(test_unicode_stack)]
+
diff --git a/Lib/test/dtracedata/unicode-jstack.py b/Lib/test/dtracedata/unicode-jstack.py
new file mode 100644
index 0000000000..d93e3d76b9
--- /dev/null
+++ b/Lib/test/dtracedata/unicode-jstack.py
@@ -0,0 +1,15 @@
+
+def function_1():
+    pass
+
+def function_2():
+    function_1()
+
+def test_unicode_stack():
+    def únícódé():
+        function_2()
+    function_1()
+    únícódé()
+
+test_unicode_stack()
+
diff --git a/Lib/test/test_dtrace.py b/Lib/test/test_dtrace.py
index 4b971deacc..c64a61231d 100644
--- a/Lib/test/test_dtrace.py
+++ b/Lib/test/test_dtrace.py
@@ -153,6 +153,37 @@ def test_gc(self):
     def test_line(self):
         self.run_case("line")
 
+    def _jstack(self, name):
+        def _jstack_decode(str):
+            # When compiling with '--with-pydebug'
+            str = "".join(re.split(r'\[[0-9]+ refs\]', str))
+
+            str = [i for i in str.split("\n") \
+                if (("[" in i) and not i.endswith(" (<module>) ]"))]
+            str = "\n".join(str)
+            str = str.replace("\r", "").replace(" ", "")
+            return str
+
+        df = abspath(name + self.backend.EXTENSION)
+        pyf = abspath(name + ".py")
+
+        output = self.backend.trace_python(script_file=df, python_file=pyf,
+            optimize_python=self.optimize_python)
+
+        actual_result = _jstack_decode(output).replace(pyf, 'PyFile')
+
+        with open(abspath(name + self.backend.EXTENSION + ".expected")) as f:
+            expected_result = f.read().rstrip()
+
+        expected_result = expected_result.replace("\r", "").replace(" ", "")
+
+        self.assertEqual(actual_result, expected_result)
+
+    def test_jstack(self):
+        self._jstack("jstack")
+
+    def test_unicode_jstack(self):
+        self._jstack("unicode-jstack")
 
 class DTraceNormalTests(TraceTests, unittest.TestCase):
     backend = DTraceBackend()
diff --git a/Makefile.pre.in b/Makefile.pre.in
index 8fbcd7ac17..edf95c6653 100644
--- a/Makefile.pre.in
+++ b/Makefile.pre.in
@@ -1447,17 +1447,46 @@ Python/frozen.o: $(FROZEN_FILES_OUT)
 # an include guard, so we can't use a pipeline to transform its output.
 Include/pydtrace_probes.h: $(srcdir)/Include/pydtrace.d
 	$(MKDIR_P) Include
-	$(DTRACE) $(DFLAGS) -o $@ -h -s $<
+	$(DTRACE) $(DFLAGS) -C -o $@ -h -s $<
 	: sed in-place edit with POSIX-only tools
 	sed 's/PYTHON_/PyDTrace_/' $@ > $@.tmp
 	mv $@.tmp $@
 
+Include/pydtrace_offsets: $(srcdir)/Include/pydtrace_offsets.c
+	$(MKDIR_P) Include
+	$(CC) $(PY_CORE_CFLAGS) -o $@ $<
+
+Include/pydtrace_offsets.h: Include/pydtrace_offsets
+	$< > $@
+
+Include/pydtrace_symbols: $(srcdir)/Include/pydtrace_symbols.sh
+	$(MKDIR_P) Include
+	cp $< $@
+	chmod +x $@
+
+Include/pydtrace_symbols.h: Include/pydtrace_symbols Python/ceval.o
+	$^ > $@
+
+Include/dtrace.cpp: $(srcdir)/Include/dtrace.cpp.sh
+	$(MKDIR_P) Include
+	cp $< $@
+	chmod +x $@
+
+clean-dtrace:
+	rm -f Include/dtrace.cpp Include/pydtrace_symbols
+	rm -f Include/pydtrace_offsets Include/pydtrace_offsets.h
+	rm -f Include/pydtrace_symbols.h
+
 Python/ceval.o: $(srcdir)/Include/pydtrace.h
 Python/import.o: $(srcdir)/Include/pydtrace.h
 Modules/gcmodule.o: $(srcdir)/Include/pydtrace.h
 
+Python/pydtrace.o: Include/dtrace.cpp
+Python/pydtrace.o: Include/pydtrace_offsets.h Include/pydtrace_symbols.h
 Python/pydtrace.o: $(srcdir)/Include/pydtrace.d $(DTRACE_DEPS)
-	$(DTRACE) $(DFLAGS) -o $@ -G -s $< $(DTRACE_DEPS)
+	$(DTRACE) $(DFLAGS) -DPYDTRACE_STACK_HELPER $(PY_CPPFLAGS) \
+	    -C -xcpppath=./Include/dtrace.cpp \
+	    -o $@ -G -s $< $(DTRACE_DEPS)
 
 Objects/typeobject.o: Objects/typeslots.inc
 
@@ -2418,7 +2447,7 @@ profile-removal:
 	rm -rf $(COVERAGE_REPORT)
 	rm -f profile-run-stamp
 
-clean: clean-retain-profile
+clean: clean-retain-profile clean-dtrace
 	@if test @DEF_MAKE_ALL_RULE@ = profile-opt; then \
 		rm -f profile-gen-stamp profile-clean-stamp; \
 		$(MAKE) profile-removal; \
diff --git a/Objects/codeobject.c b/Objects/codeobject.c
index d7434ddefb..bb157b177b 100644
--- a/Objects/codeobject.c
+++ b/Objects/codeobject.c
@@ -347,6 +347,10 @@ init_code(PyCodeObject *co, struct _PyCodeConstructor *con)
         entry_point++;
     }
     co->_co_firsttraceable = entry_point;
+
+#ifdef WITH_DTRACE
+    (void) _PyCode_InitLineArray(co);
+#endif
 }
 
 static int
diff --git a/Python/ceval.c b/Python/ceval.c
index 478ecd8e92..94dac92cf0 100644
--- a/Python/ceval.c
+++ b/Python/ceval.c
@@ -1639,7 +1639,13 @@ typedef struct {
     (call_shape.kwnames == NULL ? 0 : ((int)PyTuple_GET_SIZE(call_shape.kwnames)))
 
 PyObject* _Py_HOT_FUNCTION
+#ifdef WITH_DTRACE
+_PyEval_EvalFrameDefaultReal(
+    long a1, long a2, long a3, long a4, PyThreadState *tstate, int throwflag,
+    _PyInterpreterFrame *frame)
+#else
 _PyEval_EvalFrameDefault(PyThreadState *tstate, _PyInterpreterFrame *frame, int throwflag)
+#endif
 {
     _Py_EnsureTstateNotNULL(tstate);
     CALL_STAT_INC(pyeval_calls);
@@ -5832,6 +5838,29 @@ _PyEval_EvalFrameDefault(PyThreadState *tstate, _PyInterpreterFrame *frame, int
 
 }
 
+#ifdef WITH_DTRACE
+
+/*
+ * These shenanigans look like utter madness, but what we're actually doing is
+ * making sure that the ustack helper will see the PyFrameObject pointer on the
+ * stack.
+ *
+ * We use up the six registers for passing arguments, meaning the call can't
+ * use a register for passing 'f', and has to push it onto the stack in a known
+ * location.
+ */
+
+PyObject* __attribute__((noinline))
+_PyEval_EvalFrameDefault(PyThreadState *tstate, _PyInterpreterFrame *f,
+    int throwflag)
+{
+    volatile PyObject *f2;
+    f2 = _PyEval_EvalFrameDefaultReal(0, 0, 0, 0, tstate, throwflag, f);
+    return (PyObject *)f2;
+}
+#endif
+
+
 static void
 format_missing(PyThreadState *tstate, const char *kind,
                PyCodeObject *co, PyObject *names, PyObject *qualname)
@@ -7884,7 +7913,7 @@ dtrace_function_entry(_PyInterpreterFrame *frame)
     funcname = PyUnicode_AsUTF8(code->co_name);
     lineno = _PyInterpreterFrame_GetLine(frame);
 
-    PyDTrace_FUNCTION_ENTRY(filename, funcname, lineno);
+    PyDTrace_FUNCTION_ENTRY((char *)filename, (char *)funcname, lineno);
 }
 
 static void
@@ -7899,7 +7928,7 @@ dtrace_function_return(_PyInterpreterFrame *frame)
     funcname = PyUnicode_AsUTF8(code->co_name);
     lineno = _PyInterpreterFrame_GetLine(frame);
 
-    PyDTrace_FUNCTION_RETURN(filename, funcname, lineno);
+    PyDTrace_FUNCTION_RETURN((char *)filename, (char *)funcname, lineno);
 }
 
 /* DTrace equivalent of maybe_call_line_trace. */
@@ -7930,7 +7959,7 @@ maybe_dtrace_line(_PyInterpreterFrame *frame,
             if (!co_name) {
                 co_name = "?";
             }
-            PyDTrace_LINE(co_filename, co_name, line);
+            PyDTrace_LINE((char *)co_filename, (char *)co_name, line);
         }
     }
 }
diff --git a/Python/import.c b/Python/import.c
index ca728c4247..5a88d5ec7d 100644
--- a/Python/import.c
+++ b/Python/import.c
@@ -1730,13 +1730,13 @@ import_find_and_load(PyThreadState *tstate, PyObject *abs_name)
     }
 
     if (PyDTrace_IMPORT_FIND_LOAD_START_ENABLED())
-        PyDTrace_IMPORT_FIND_LOAD_START(PyUnicode_AsUTF8(abs_name));
+        PyDTrace_IMPORT_FIND_LOAD_START((char *)PyUnicode_AsUTF8(abs_name));
 
     mod = PyObject_CallMethodObjArgs(interp->importlib, &_Py_ID(_find_and_load),
                                      abs_name, interp->import_func, NULL);
 
     if (PyDTrace_IMPORT_FIND_LOAD_DONE_ENABLED())
-        PyDTrace_IMPORT_FIND_LOAD_DONE(PyUnicode_AsUTF8(abs_name),
+        PyDTrace_IMPORT_FIND_LOAD_DONE((char *)PyUnicode_AsUTF8(abs_name),
                                        mod != NULL);
 
     if (import_time) {
diff --git a/Python/sysmodule.c b/Python/sysmodule.c
index dca97f21a2..e2132fa6f7 100644
--- a/Python/sysmodule.c
+++ b/Python/sysmodule.c
@@ -220,7 +220,7 @@ sys_audit_tstate(PyThreadState *ts, const char *event,
 
     /* Dtrace USDT point */
     if (dtrace) {
-        PyDTrace_AUDIT(event, (void *)eventArgs);
+        PyDTrace_AUDIT((char *)event, (void *)eventArgs);
     }
 
     /* Call interpreter hooks */
