  GEN      public-submodule-commit
Making check in po
Making check in runtime-po
Making check in gnulib-po
Making check in .
  GEN      doc/bison.help
updating examples/c/bistromathic/parse.output
updating examples/c/bistromathic/parse.h
updating examples/c/calc/calc.output
updating examples/c/calc/calc.h
updating examples/c/lexcalc/parse.output
updating examples/c/lexcalc/parse.h
  LEX      examples/c/lexcalc/scan.c
updating examples/c/mfcalc/mfcalc.output
updating examples/c/mfcalc/mfcalc.h
updating examples/c/pushcalc/calc.output
updating examples/c/pushcalc/calc.h
updating examples/c/reccalc/parse.output
updating examples/c/reccalc/parse.h
updating examples/c/rpcalc/rpcalc.output
updating examples/c/rpcalc/rpcalc.h
  LEX      examples/c++/calc++/scanner.cc
updating examples/c++/simple.output
updating examples/c++/simple.hh
updating examples/c++/variant.output
updating examples/c++/variant.hh
updating examples/c++/variant-11.output
updating examples/c++/variant-11.hh
  GEN      examples/java/calc/Calc.java
  GEN      examples/java/calc/Calc.class
warning: [options] bootstrap class path not set in conjunction with -source 1.7
1 warning
  GEN      examples/java/simple/Calc.java
  GEN      examples/java/simple/Calc.class
warning: [options] bootstrap class path not set in conjunction with -source 1.7
1 warning
PASS: examples/c/mfcalc/mfcalc.test
PASS: examples/c/rpcalc/rpcalc.test
PASS: examples/c/bistromathic/bistromathic.test
PASS: examples/c/calc/calc.test
PASS: examples/c/lexcalc/lexcalc.test
PASS: examples/c/pushcalc/calc.test
PASS: examples/c/reccalc/reccalc.test
PASS: examples/c++/calc++/calc++.test
PASS: examples/c++/simple.test
PASS: examples/c++/variant.test
PASS: examples/c++/variant-11.test
PASS: examples/java/calc/Calc.test
PASS: examples/java/simple/Calc.test
============================================================================
Testsuite summary for GNU Bison 3.6.2
============================================================================
# TOTAL: 13
# PASS:  13
# SKIP:  0
# XFAIL: 0
# FAIL:  0
# XPASS: 0
# ERROR: 0
============================================================================
  GEN      doc/bison.help
Making all in po
Making all in runtime-po
Making all in gnulib-po
Making all in .
  GEN      doc/bison.help
## --------------------------- ##
## GNU Bison 3.6.2 test suite. ##
## --------------------------- ##

M4 Macros.

  1: Generating Comments                             ok

Input Processing.

  2: Invalid number of arguments                     ok
  3: Invalid options                                 ok
  4: Invalid inputs                                  ok
  5: Invalid inputs with {}                          ok
  6: Yacc warnings on symbols                        ok
  7: Yacc warnings                                   ok
  8: Yacc's %type                                    ok
  9: Invalid symbol declarations                     ok
 10: Redefining the error token                      ok
 11: Dangling aliases                                ok
 12: Symbol declarations                             ok
 13: Invalid $n and @n                               ok
 14: Type Clashes                                    ok
 15: Unused values                                   ok
 16: Unused values before symbol declarations        ok
 17: Symbol redeclared                               ok
 18: Symbol class redefinition                       ok
 19: Default %printer and %destructor redeclared     ok
 20: Per-type %printer and %destructor redeclared    ok
 21: Undefined symbols                               ok
 22: Unassociated types used for a printer or destructor ok
 23: Useless printers or destructors                 ok
 24: Unused values with default %destructor          ok
 25: Unused values with per-type %destructor         ok
 26: Duplicate string                                ok
 27: Token collisions                                ok
 28: Incompatible Aliases                            ok
 29: Torturing the Scanner                           ok
 30: Typed symbol aliases                            ok
 31: Require 1.0                                     ok
 32: Require 3.6.2                                   ok
 33: Require 100.0                                   ok
 34: String aliases for character tokens             ok
 35: Symbols                                         ok
 36: Numbered tokens                                 ok
 37: Unclosed constructs                             ok
 38: %start after first rule                         ok
 39: %prec takes a token                             ok
 40: %prec's token must be defined                   ok
 41: Reject unused %code qualifiers                  ok
 42: Multiple %code                                  ok
 43: errors                                          ok
 44: %define, --define, --force-define               ok
 45: "%define" Boolean variables                     ok
 46: "%define" code variables                        ok
 47: "%define" keyword variables                     ok
 48: "%define" enum variables                        ok
 49: "%define" file variables                        ok
 50: "%define" backward compatibility                ok
 51: Unused api.pure                                 ok
 52: C++ namespace reference errors                  ok
 53: Bad character literals                          ok
 54: Bad escapes in literals                         ok
 55: LAC: Errors for %define                         ok
 56: -Werror combinations                            ok
 57: %name-prefix and api.prefix are incompatible    ok
 58: Redefined %union name                           ok
 59: Stray $ or @                                    ok
 60: Code injection                                  ok
 61: Deprecated directives                           ok
 62: Unput's effect on locations                     ok
 63: Non-deprecated directives                       ok
 64: Cannot type action                              ok
 65: Character literals and api.token.raw            ok
 66: %token-table and parse.error                    ok

Named references tests.

 67: Tutorial calculator                             ok
 68: Undefined and ambiguous references              ok
 69: Misleading references                           ok
 70: Many kinds of errors                            ok
 71: Missing identifiers in brackets                 ok
 72: Redundant words in brackets                     ok
 73: Comments in brackets                            ok
 74: Stray symbols in brackets                       ok
 75: Redundant words in LHS brackets                 ok
 76: Factored LHS                                    ok
 77: Unresolved references                           ok
 78: $ or @ followed by . or -                       ok

Output file names.

 79: Output files:  -dv                              ok
 80: Output files:  -dv >&-                          ok
 81: Output files:  -dv -o foo.c                     ok
 82: Output files:  -dv -o foo.tab.c                 ok
 83: Output files:  -dv -g --xml --fixed-output-files ok
 84: Output files:  -dv -g --xml -y                  ok
 85: Output files: %require "3.4" -dv -g --xml -y    ok
 86: Output files:  -dv -g --xml -o y.tab.c          ok
 87: Output files:  -dv -b bar                       ok
 88: Output files:  -dv -g -o foo.c                  ok
 89: Output files: %defines %verbose                 ok
 90: Output files: %defines %verbose %yacc           ok
 91: Output files: %defines %verbose %yacc           ok
 92: Output files: %file-prefix "bar" %defines %verbose  ok
 93: Output files: %output "bar.c" %defines %verbose %yacc  ok
 94: Output files: %file-prefix "baz" %output "bar.c" %defines %verbose %yacc  ok
 95: Output files: %defines %verbose                 ok
 96: Output files: %defines %verbose  -o foo.c       ok
 97: Output files:  --defines=foo.hpp -o foo.c++     ok
 98: Output files: %defines "foo.hpp" -o foo.c++     ok
 99: Output files:  -o foo.c++ --graph=foo.gph       ok
100: Output files: %type <foo> useless --defines --graph --xml --report=all -Wall -Werror ok
101: Output files: useless=--defines --graph --xml --report=all -Wall -Werror ok
102: Output files: lalr1.cc                          ok
103: Output files: lalr1.cc %verbose                 ok
104: Output files: lalr1.cc %defines %verbose        ok
105: Output files: lalr1.cc %verbose %locations      ok
106: Output files: lalr1.cc %defines %verbose %locations  ok
107: Output files: lalr1.cc %defines %verbose        ok
108: Output files: lalr1.cc %defines %verbose %locations -o subdir/foo.cc ok
109: Output files: lalr1.cc %defines %verbose %file-prefix "output_dir/foo"  ok
110: Output files: lalr1.cc %defines %locations %verbose %file-prefix "output_dir/foo"  ok
111: Output files: lalr1.cc %defines %locations api.location.file=none %require "3.2"  ok
112: Output files: lalr1.cc %defines %locations api.location.file="foo.loc.hh" %require "3.2"  ok
113: Output files: lalr1.cc %defines %locations api.location.file="$at_dir/foo.loc.hh" %require "3.2"  ok
114: Conflicting output files:  --graph="foo.tab.c"  ok
115: Conflicting output files: %defines "foo.output" -v ok
116: Conflicting output files: lalr1.cc %defines %locations --graph="location.hh" ok
117: Conflicting output files:  -o foo.y             ok
118: Output file name: `~!@#$%^&*()-=_+{}[]|\:;<>, .' ok
119: Output file name: (                             ok
120: Output file name: )                             ok
121: Output file name: #                             ok
122: Output file name: @@                            ok
123: Output file name: @{                            ok
124: Output file name: @}                            ok
125: Output file name: [                             ok
126: Output file name: ]                             ok
127: Graph with no conflicts                         ok
128: Graph with unsolved S/R                         ok
129: Graph with solved S/R                           ok
130: Graph with R/R                                  ok
131: Graph with reductions with multiple LAT         ok
132: Graph with a reduction rule both enabled and disabled ok

Diagnostics.

133: Warnings                                        ok
134: Single point locations                          ok
135: Line is too short, and then you die             ok
136: Zero-width characters                           ok
137: Tabulations and multibyte characters            ok
138: Tabulations and multibyte characters            ok
139: Special files                                   ok
140: Complaints from M4                              ok
141: Carriage return                                 ok
142: CR NL                                           ok
143: Screen width: 200 columns                       ok
144: Screen width: 80 columns                        ok
145: Screen width: 60 columns                        ok
146: Suggestions                                     ok
147: Indentation with message suppression            ok

Skeleton Support.

148: Relative skeleton file names                    ok
149: Installed skeleton file names                   ok
150: Boolean=variables: invalid skeleton defaults    ok
151: Complaining during macro argument expansion     ok
152: Fatal errors make M4 exit immediately           ok
153: Fatal errors but M4 continues producing output  ok

Grammar Sets (Firsts etc.).

154: Nullable                                        ok
155: Broken Closure                                  ok
156: Firsts                                          ok
157: Accept                                          ok
158: Build relations                                 ok
159: Reduced Grammar                                 ok
160: Reduced Grammar with prec and assoc             ok

Grammar Reduction.

161: Useless Terminals                               ok
162: Useless Nonterminals                            ok
163: Useless Rules                                   ok
164: Useless Parts                                   ok
165: Reduced Automaton                               ok
166: Underivable Rules                               ok
167: Empty Language                                  ok
168: no lr.type: Single State Split                  ok
169: lr.type=lalr: Single State Split                ok
170: lr.type=ielr: Single State Split                ok
171: lr.type=canonical-lr: Single State Split        ok
172: no lr.type: Lane Split                          ok
173: lr.type=lalr: Lane Split                        ok
174: lr.type=ielr: Lane Split                        ok
175: lr.type=canonical-lr: Lane Split                ok
176: no lr.type: Complex Lane Split                  ok
177: lr.type=lalr: Complex Lane Split                ok
178: lr.type=ielr: Complex Lane Split                ok
179: lr.type=canonical-lr: Complex Lane Split        ok
180: no lr.type: Split During Added Lookahead Propagation ok
181: lr.type=lalr: Split During Added Lookahead Propagation ok
182: lr.type=ielr: Split During Added Lookahead Propagation ok
183: lr.type=canonical-lr: Split During Added Lookahead Propagation ok
184: no lr.default-reduction                         ok
185: lr.default-reduction=most                       ok
186: lr.default-reduction=consistent                 ok
187: lr.default-reduction=accepting                  ok

Test reports.

188: Reports                                         ok

Conflicts.

189: Token declaration order                         ok
190: Token declaration order: literals vs. identifiers ok
191: Useless associativity warning                   ok
192: Useless precedence warning                      ok
193: S/R in initial                                  ok
194: %nonassoc and eof                               ok
195: parse.error=verbose and consistent errors: lr.type=ielr ok
196: parse.error=verbose and consistent errors: lr.type=ielr %glr-parser ok
197: parse.error=verbose and consistent errors: lr.type=ielr c++ ok
198: parse.error=verbose and consistent errors: lr.type=ielr java ok
199: parse.error=verbose and consistent errors: lr.type=ielr lr.default-reduction=consistent ok
200: parse.error=verbose and consistent errors: lr.type=ielr lr.default-reduction=accepting ok
201: parse.error=verbose and consistent errors: lr.type=canonical-lr ok
202: parse.error=verbose and consistent errors: lr.type=canonical-lr parse.lac=full ok
203: parse.error=verbose and consistent errors: lr.type=ielr parse.lac=full ok
204: parse.error=verbose and consistent errors: c++ lr.type=canonical-lr parse.lac=full ok
205: parse.error=verbose and consistent errors: c++ lr.type=ielr parse.lac=full ok
206: parse.error=verbose and consistent errors:      ok
207: parse.error=verbose and consistent errors: %glr-parser ok
208: parse.error=verbose and consistent errors: lr.default-reduction=consistent ok
209: parse.error=verbose and consistent errors: lr.default-reduction=accepting ok
210: parse.error=verbose and consistent errors: lr.type=canonical-lr ok
211: parse.error=verbose and consistent errors: parse.lac=full ok
212: parse.error=verbose and consistent errors: parse.lac=full lr.default-reduction=accepting ok
213: LAC: %nonassoc requires splitting canonical LR states ok
214: Unresolved SR Conflicts                         ok
215: Resolved SR Conflicts                           ok
216: %precedence suffices                            ok
217: %precedence does not suffice                    ok
218: Syntax error in consistent error state: yacc.c  ok
219: Syntax error in consistent error state: glr.c   ok
220: Syntax error in consistent error state: lalr1.cc ok
221: Syntax error in consistent error state: glr.cc  ok
222: Defaulted Conflicted Reduction                  ok
223: %expect not enough                              ok
224: %expect right                                   ok
225: %expect too much                                ok
226: %expect with reduce conflicts                   ok
227: %expect in grammar rule not enough              ok
228: %expect in grammar rule right                   ok
229: %expect in grammar rules                        ok
230: %expect in grammar rule too much                ok
231: %expect-rr in grammar rule                      ok
232: %expect-rr too much in grammar rule             ok
233: %expect-rr not enough in grammar rule           ok
234: %prec with user string                          ok
235: %no-default-prec without %prec                  ok
236: %no-default-prec with %prec                     ok
237: %default-prec                                   ok
238: Unreachable States After Conflict Resolution    ok
239: Solved conflicts report for multiple reductions in a state ok
240: %nonassoc error actions for multiple reductions in a state ok
241: %expect-rr non GLR                              ok
242: -W versus %expect and %expect-rr                ok

Sync Lines.

243: Prologue syncline                               ok
244: %union syncline                                 ok
245: %union name syncline                            ok
246: Postprologue syncline                           ok
247: Action syncline                                 ok
248: Epilogue syncline                               ok
249: %code top syncline                              ok
250: %destructor syncline                            ok
251: %printer syncline                               ok
252: syncline escapes: yacc.c                        ok
253: syncline escapes: glr.c                         ok
254: syncline escapes: lalr1.cc                      ok
255: syncline escapes: glr.cc                        ok
256: %no-lines: yacc.c                               ok
257: %no-lines: glr.c                                ok
258: %no-lines: lalr1.cc                             ok
259: %no-lines: glr.cc                               ok
260: Output columns                                  ok

Parser Headers.

261: Invalid CPP guards:  --defines=input/input.h    ok
262: Invalid CPP guards:  --defines=9foo.h           ok
263: Invalid CPP guards: %glr-parser --defines=input/input.h ok
264: Invalid CPP guards: %glr-parser --defines=9foo.h ok
265: export YYLTYPE                                  ok
266: Sane headers:                                   ok
267: Sane headers: %locations %debug                 ok
268: Sane headers: %glr-parser                       ok
269: Sane headers: %locations %debug %glr-parser     ok
270: Sane headers: api.pure                          ok
271: Sane headers: api.push-pull=both                ok
272: Sane headers: api.pure api.push-pull=both       ok
273: Sane headers: c++                               ok
274: Sane headers: %locations %debug c++             ok
275: Sane headers: c++ api.value.type=variant parse.assert ok
276: Sane headers: %locations c++ %glr-parser        ok
277: Several parsers                                 ok

User Actions.

278: Midrule actions                                 ok
279: Typed midrule actions                           ok
280: Implicitly empty rule                           ok
281: Invalid uses of %empty                          ok
282: Valid uses of %empty                            ok
283: Add missing %empty                              ok
284: Initial location: yacc.c                        ok
285: Initial location: yacc.c api.pure=full          ok
286: Initial location: yacc.c api.pure %parse-param { int x } ok
287: Initial location: yacc.c api.push-pull=both     ok
288: Initial location: yacc.c api.push-pull=both api.pure=full ok
289: Initial location: glr.c                         ok
290: Initial location: glr.c api.pure                ok
291: Initial location: lalr1.cc                      ok
292: Initial location: glr.cc                        ok
293: Initial location: yacc.c api.pure=full          ok
294: Initial location: yacc.c api.pure=full          ok
295: Location print: yacc.c                          ok
296: Location print: glr.c                           ok
297: Location print: lalr1.cc                        ok
298: Location print: glr.cc                          ok
299: Exotic Dollars                                  ok
300: Printers and Destructors                        ok
301: Printers and Destructors with union             ok
302: Printers and Destructors: %glr-parser           ok
303: Printers and Destructors with union: %glr-parser ok
304: Printers and Destructors: %defines lalr1.cc     ok
305: Printers and Destructors with union: %defines lalr1.cc ok
306: Printers and Destructors: %defines glr.cc       ok
307: Printers and Destructors with union: %defines glr.cc ok
308: Default tagless %printer and %destructor        ok
309: Default tagged and per-type %printer and %destructor ok
310: Default %printer and %destructor for user-defined end token ok
311: Default %printer and %destructor are not for error or $undefined ok
312: Default %printer and %destructor are not for $accept ok
313: Default %printer and %destructor for midrule values ok
314: @$ in %initial-action implies %locations        ok
315: @$ in %destructor implies %locations            ok
316: @$ in %printer implies %locations               ok
317: Qualified $$ in actions: yacc.c                 ok
318: Qualified $$ in actions: glr.c                  ok
319: Qualified $$ in actions: lalr1.cc               ok
320: Qualified $$ in actions: glr.cc                 ok
321: Destroying lookahead assigned by semantic action ok
322: YYBACKUP                                        ok

Value type tests.

323: %union vs. api.value.type                       ok
324: %yacc vs. api.value.type=union                  ok
325: yacc.c api.value.type={double}                  ok
326: yacc.c api.value.type={double} %defines         ok
327: yacc.c api.value.type={variant}                 ok
328: yacc.c api.value.type={variant} %defines        ok
329: yacc.c api.value.type={struct foo}              ok
330: yacc.c api.value.type={struct foo} %defines     ok
331: yacc.c api.value.type={struct bar}              ok
332: yacc.c api.value.type={struct bar} %defines     ok
333: yacc.c api.value.type={union foo}               ok
334: yacc.c api.value.type={union foo} %defines      ok
335: yacc.c %union { float fval; int ival; };        ok
336: yacc.c %union { float fval; int ival; }; %defines ok
337: yacc.c %union foo { float fval; int ival; };    ok
338: yacc.c %union foo { float fval; int ival; }; %defines ok
339: yacc.c api.value.union.name=foo; %union { float fval; int ival; }; ok
340: yacc.c api.value.union.name=foo; %union { float fval; int ival; }; %defines ok
341: yacc.c api.value.type=union                     ok
342: yacc.c api.value.type=union %defines            ok
343: glr.c api.value.type={double}                   ok
344: glr.c api.value.type={double} %defines          ok
345: glr.c api.value.type={variant}                  ok
346: glr.c api.value.type={variant} %defines         ok
347: glr.c api.value.type={struct foo}               ok
348: glr.c api.value.type={struct foo} %defines      ok
349: glr.c api.value.type={struct bar}               ok
350: glr.c api.value.type={struct bar} %defines      ok
351: glr.c api.value.type={union foo}                ok
352: glr.c api.value.type={union foo} %defines       ok
353: glr.c %union { float fval; int ival; };         ok
354: glr.c %union { float fval; int ival; }; %defines ok
355: glr.c %union foo { float fval; int ival; };     ok
356: glr.c %union foo { float fval; int ival; }; %defines ok
357: glr.c api.value.union.name=foo; %union { float fval; int ival; }; ok
358: glr.c api.value.union.name=foo; %union { float fval; int ival; }; %defines ok
359: glr.c api.value.type=union                      ok
360: glr.c api.value.type=union %defines             ok
361: lalr1.cc api.value.type={double}                ok
362: lalr1.cc api.value.type={double} %defines       ok
363: lalr1.cc api.value.type={variant}               ok
364: lalr1.cc api.value.type={variant} %defines      ok
365: lalr1.cc api.value.type={struct foo}            ok
366: lalr1.cc api.value.type={struct foo} %defines   ok
367: lalr1.cc api.value.type={struct bar}            ok
368: lalr1.cc api.value.type={struct bar} %defines   ok
369: lalr1.cc api.value.type={union foo}             ok
370: lalr1.cc api.value.type={union foo} %defines    ok
371: lalr1.cc %union { float fval; int ival; };      ok
372: lalr1.cc %union { float fval; int ival; }; %defines ok
373: lalr1.cc api.value.type=union                   ok
374: lalr1.cc api.value.type=union %defines          ok
375: lalr1.cc api.value.type=variant                 ok
376: lalr1.cc api.value.type=variant %defines        ok
377: lalr1.cc api.value.type=variant                 ok
378: lalr1.cc api.value.type=variant %defines        ok
379: lalr1.cc api.value.type=variant api.token.constructor ok
380: lalr1.cc api.value.type=variant api.token.constructor %defines ok
381: lalr1.cc %code requires { #include <memory> } api.value.type=variant ok
382: lalr1.cc %code requires { #include <memory> } api.value.type=variant %defines ok
383: lalr1.cc %code requires { #include <memory> } api.value.type=variant api.token.constructor ok
384: lalr1.cc %code requires { #include <memory> } api.value.type=variant api.token.constructor %defines ok
385: lalr1.cc %code requires { #include <memory> } api.value.type=variant api.token.constructor ok
386: lalr1.cc %code requires { #include <memory> } api.value.type=variant api.token.constructor %defines ok
387: glr.cc api.value.type={double}                  ok
388: glr.cc api.value.type={double} %defines         ok
389: glr.cc api.value.type={variant}                 ok
390: glr.cc api.value.type={variant} %defines        ok
391: glr.cc api.value.type={struct foo}              ok
392: glr.cc api.value.type={struct foo} %defines     ok
393: glr.cc api.value.type={struct bar}              ok
394: glr.cc api.value.type={struct bar} %defines     ok
395: glr.cc api.value.type={union foo}               ok
396: glr.cc api.value.type={union foo} %defines      ok
397: glr.cc %union { float fval; int ival; };        ok
398: glr.cc %union { float fval; int ival; }; %defines ok
399: glr.cc api.value.type=union                     ok
400: glr.cc api.value.type=union %defines            ok
401: lalr1.cc: Named %union                          ok
402: glr.cc: Named %union                            ok

Interface with the scanner.

403: Token numbers: yacc.c                           ok
404: Token numbers: yacc.c api.token.raw             ok
405: Token numbers: glr.c                            ok
406: Token numbers: glr.c api.token.raw              ok
407: Token numbers: lalr1.cc                         ok
408: Token numbers: lalr1.cc api.token.raw           ok
409: Token numbers: glr.cc                           ok
410: Token numbers: glr.cc api.token.raw             ok
411: Token numbers: lalr1.java                       ok
412: Token numbers: lalr1.java api.token.raw         ok
413: Token numbers: lalr1.d                          skipped (scanner.at:338)
414: Token numbers: lalr1.d api.token.raw            skipped (scanner.at:338)
415: Token numbers: lalr1.cc api.token.raw api.value.type=variant api.token.constructor ok

LALR(1) Calculator.

416: Calculator parse.trace                          ok
417: Calculator %defines                             ok
418: Calculator %debug %locations                    ok
419: Calculator %locations api.location.type={Span}  ok
420: Calculator %name-prefix "calc"                  ok
421: Calculator %verbose                             ok
422: Calculator %yacc                                ok
423: Calculator parse.error=detailed                 ok
424: Calculator parse.error=verbose                  ok
425: Calculator api.pure=full %locations             ok
426: Calculator api.push-pull=both api.pure=full %locations  ok
427: Calculator parse.error=detailed %locations      ok
428: Calculator parse.error=detailed %locations %defines api.prefix={calc} %verbose %yacc  ok
429: Calculator parse.error=detailed %locations %defines %name-prefix "calc" api.token.prefix={TOK_} %verbose %yacc  ok
430: Calculator %debug                               ok
431: Calculator parse.error=detailed %debug %locations %defines %name-prefix "calc" %verbose %yacc  ok
432: Calculator parse.error=detailed %debug %locations %defines api.prefix={calc} %verbose %yacc  ok
433: Calculator api.pure=full parse.error=detailed %debug %locations %defines %name-prefix "calc" %verbose %yacc  ok
434: Calculator api.push-pull=both api.pure=full parse.error=detailed %debug %locations %defines api.prefix={calc} %verbose %yacc  ok
435: Calculator api.pure parse.error=detailed %debug %locations %defines api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
436: Calculator %no-lines api.pure parse.error=detailed %debug %locations %defines api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
437: Calculator %no-lines api.pure parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
438: Calculator parse.error=custom                   ok
439: Calculator parse.error=custom %locations api.prefix={calc}  ok
440: Calculator parse.error=custom %locations api.prefix={calc} %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
441: Calculator parse.error=custom %locations api.prefix={calc} %parse-param {semantic_value *result}{int *count}{int *nerrs} api.push-pull=both api.pure=full  ok
442: Calculator parse.error=custom %locations api.prefix={calc} %parse-param {semantic_value *result}{int *count}{int *nerrs} api.push-pull=both api.pure=full parse.lac=full  ok

GLR Calculator.

443: Calculator %glr-parser                          ok
444: Calculator %glr-parser %defines                 ok
445: Calculator %glr-parser %locations               ok
446: Calculator %glr-parser %locations api.location.type={Span}  ok
447: Calculator %glr-parser %name-prefix "calc"      ok
448: Calculator %glr-parser api.prefix={calc}        ok
449: Calculator %glr-parser %verbose                 ok
450: Calculator %glr-parser parse.error=verbose      ok
451: Calculator %glr-parser api.pure %locations      ok
452: Calculator %glr-parser parse.error=verbose %locations  ok
453: Calculator %glr-parser parse.error=custom %locations %defines %name-prefix "calc" %verbose  ok
454: Calculator %glr-parser parse.error=detailed %locations %defines %name-prefix "calc" %verbose  ok
455: Calculator %glr-parser parse.error=verbose %locations %defines %name-prefix "calc" %verbose  ok
456: Calculator %glr-parser %debug                   ok
457: Calculator %glr-parser parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose  ok
458: Calculator %glr-parser parse.error=verbose %debug %locations %defines api.prefix={calc} api.token.prefix={TOK_} %verbose  ok
459: Calculator %glr-parser api.pure parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose  ok
460: Calculator %glr-parser api.pure parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
461: Calculator %glr-parser api.pure parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
462: Calculator %glr-parser %no-lines api.pure parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok

LALR(1) C++ Calculator.

463: Calculator lalr1.cc %defines                    ok
464: Calculator C++                                  ok
465: Calculator C++ %locations                       ok
467: Calculator C++ %locations api.location.type={Span}  ok
468: Calculator C++ %defines %locations parse.error=verbose %name-prefix "calc" %verbose  ok
469: Calculator C++ %locations parse.error=verbose api.prefix={calc} %verbose  ok
470: Calculator C++ %locations parse.error=verbose %debug %name-prefix "calc" %verbose  ok
471: Calculator C++ %locations parse.error=verbose %debug api.prefix={calc} %verbose  ok
472: Calculator C++ %locations parse.error=verbose %debug api.prefix={calc} api.token.prefix={TOK_} %verbose  ok
473: Calculator C++ %defines %locations parse.error=verbose %debug %name-prefix "calc" %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
474: Calculator C++ parse.error=verbose %debug api.prefix={calc} %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
475: Calculator C++ %defines %locations parse.error=verbose %debug api.prefix={calc} %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
476: Calculator C++ %defines %locations api.location.file=none  ok
477: Calculator C++ %defines %locations api.location.file="my-location.hh"  ok
478: Calculator C++ %no-lines %defines %locations api.location.file="my-location.hh"  ok
479: Calculator C++ %locations parse.lac=full parse.error=verbose  ok
480: Calculator C++ %locations parse.lac=full parse.error=detailed  ok
481: Calculator C++ parse.error=custom               ok
482: Calculator C++ parse.error=custom %locations api.prefix={calc} %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
483: Calculator C++ parse.error=custom %locations api.prefix={calc} %parse-param {semantic_value *result}{int *count}{int *nerrs} parse.lac=full  ok

GLR C++ Calculator.

484: Calculator glr.cc                               ok
485: Calculator C++ %glr-parser                      ok
486: Calculator C++ %glr-parser %locations           ok
487: Calculator C++ %glr-parser %locations api.location.type={Span}  ok
488: Calculator C++ %glr-parser %defines parse.error=verbose %name-prefix "calc" %verbose  ok
489: Calculator C++ %glr-parser parse.error=verbose api.prefix={calc} %verbose  ok
490: Calculator C++ %glr-parser %debug               ok
491: Calculator C++ %glr-parser parse.error=verbose %debug %name-prefix "calc" %verbose  ok
492: Calculator C++ %glr-parser parse.error=verbose %debug %name-prefix "calc" api.token.prefix={TOK_} %verbose  ok
493: Calculator C++ %glr-parser %locations %defines parse.error=verbose %debug %name-prefix "calc" %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
494: Calculator C++ %glr-parser %locations %defines parse.error=verbose %debug api.prefix={calc} %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok
495: Calculator C++ %glr-parser %no-lines %locations %defines parse.error=verbose %debug api.prefix={calc} %verbose %parse-param {semantic_value *result}{int *count}{int *nerrs}  ok

LALR(1) D Calculator.

496: Calculator lalr1.d                              skipped (calc.at:1230)
497: Calculator D                                    skipped (calc.at:1235)
498: Calculator D %locations                         skipped (calc.at:1236)
499: Calculator D parse.error=verbose api.prefix={calc} %verbose  skipped (calc.at:1238)
500: Calculator D %debug                             skipped (calc.at:1240)
501: Calculator D parse.error=verbose %debug %verbose  skipped (calc.at:1242)

LALR(1) Java Calculator.

502: Calculator Java                                 ok
503: Calculator Java parse.error=custom              ok
504: Calculator Java parse.error=detailed            ok
505: Calculator Java parse.error=verbose             ok
506: Calculator Java %locations parse.error=custom   ok
507: Calculator Java %locations parse.error=detailed  ok
508: Calculator Java %locations parse.error=verbose  ok
509: Calculator Java parse.trace parse.error=verbose  ok
510: Calculator Java parse.trace parse.error=verbose %locations %lex-param {InputStream is}  ok
511: Calculator Java api.push-pull=both              ok
512: Calculator Java api.push-pull=both parse.error=detailed %locations  ok
513: Calculator Java parse.trace parse.error=custom %locations %lex-param {InputStream is} api.push-pull=both  ok
514: Calculator Java parse.trace parse.error=verbose %locations %lex-param {InputStream is} api.push-pull=both  ok

Torture Tests.

515: Big triangle                                    ok
516: Big horizontal                                  ok
517: State number type: 128 states                   ok
518: State number type: 129 states                   ok
519: State number type: 256 states                   ok
520: State number type: 257 states                   ok
521: State number type: 32768 states                 ok
522: State number type: 65536 states                 ok
523: State number type: 65537 states                 ok
524: Many lookahead tokens                           ok
525: Exploding the Stack Size with Alloca            ok
526: Exploding the Stack Size with Malloc            ok

Existing Grammars.

527: GNU AWK 3.1.0 Grammar: LALR(1)                  ok
528: GNU AWK 3.1.0 Grammar: IELR(1)                  ok
529: GNU AWK 3.1.0 Grammar: Canonical LR(1)          ok
530: GNU Cim Grammar: LALR(1)                        ok
531: GNU Cim Grammar: IELR(1)                        ok
532: GNU Cim Grammar: Canonical LR(1)                ok
533: GNU pic (Groff 1.18.1) Grammar: LALR(1)         ok
534: GNU pic (Groff 1.18.1) Grammar: IELR(1)         ok
535: GNU pic (Groff 1.18.1) Grammar: Canonical LR(1) ok

Regression tests.

536: Trivial grammars                                ok
537: YYSTYPE typedef                                 ok
538: Early token definitions with --yacc             ok
539: Early token definitions without --yacc          ok
540: Braces parsing                                  ok
541: Rule Line Numbers                               ok
542: Mixing %token styles                            ok
543: Token definitions: parse.error=detailed         ok
544: Token definitions: parse.error=verbose          ok
545: Characters Escapes                              ok
546: Web2c Report                                    ok
547: Web2c Actions                                   ok
548: Dancer                                          ok
549: Dancer %glr-parser                              ok
550: Dancer lalr1.cc                                 ok
551: Expecting two tokens                            ok
552: Expecting two tokens %glr-parser                ok
553: Expecting two tokens lalr1.cc                   ok
554: Braced code in declaration in rules section     ok
555: String alias declared after use                 ok
556: Extra lookahead sets in report                  ok
557: Token number in precedence declaration          ok
558: parse-gram.y: LALR = IELR                       ok
559: parse.error=verbose and YYSTACK_USE_ALLOCA      ok
560: parse.error=verbose overflow                    ok
561: LAC: Exploratory stack                          ok
562: LAC: Memory exhaustion                          ok
563: Lex and parse params: yacc.c                    ok
564: Lex and parse params: glr.c                     ok
565: Lex and parse params: lalr1.cc                  ok
566: Lex and parse params: glr.cc                    ok
567: stdio.h is not needed                           ok

Push Parsing Tests

568: Memory Leak for Early Deletion                  ok
569: Multiple impure instances                       ok
570: Unsupported Skeletons                           ok

C++ Features.

571: C++ Locations Unit Tests                        ok
572: C++ Variant-based Symbols Unit Tests            ok
573: Multiple occurrences of $n and api.value.automove ok
574: Variants lalr1.cc                               ok
575: Variants lalr1.cc parse.assert                  ok
576: Variants lalr1.cc parse.assert api.value.automove ok
577: Variants lalr1.cc parse.assert %locations       ok
578: Variants lalr1.cc parse.assert %code {\n#define TWO_STAGE_BUILD\n} ok
579: Variants lalr1.cc parse.assert api.token.constructor ok
580: Variants lalr1.cc parse.assert api.token.constructor api.token.prefix={TOK_} ok
581: Variants lalr1.cc parse.assert api.token.constructor api.token.prefix={TOK_} %locations ok
582: Variants lalr1.cc parse.assert api.token.constructor api.token.prefix={TOK_} %locations api.value.automove ok
583: Variants and Typed Midrule Actions              ok
584: Doxygen Public Documentation                    skipped (c++.at:787)
585: Doxygen Private Documentation                   skipped (c++.at:788)
586: Relative namespace references                   ok
587: Absolute namespace references                   ok
588: Syntactically invalid namespace references      ok
589: Syntax error discarding no lookahead            ok
590: Syntax error as exception: lalr1.cc             ok
591: Syntax error as exception: glr.cc               ok
592: Exception safety with error recovery            ok
593: Exception safety without error recovery         ok
594: Exception safety with error recovery api.value.type=variant ok
595: Exception safety without error recovery api.value.type=variant ok
596: C++ GLR parser identifier shadowing             ok
597: Shared locations                                ok
598: Default action                                  ok

Java Calculator.

599: Java invalid directives                         ok

Java Parameters.

600: Java parser class and package names             ok
601: Java parser class modifiers                     ok
602: Java parser class extends and implements        ok
603: Java %parse-param and %lex-param                ok
604: Java throws specifications                      ok
605: Java constructor init and init_throws           ok
606: Java value, position, and location types        ok
607: Java syntax error handling without error token  ok

Java Push Parsing Tests

608: Trivial Push Parser with api.push-pull verification ok
609: Trivial Push Parser with %initial-action        ok

C++ Type Syntax (GLR).

610: GLR: Resolve ambiguity, impure, no locations    ok
611: GLR: Resolve ambiguity, impure, locations       ok
612: GLR: Resolve ambiguity, pure, no locations      ok
613: GLR: Resolve ambiguity, pure, locations         ok
614: GLR: Merge conflicting parses, impure, no locations ok
615: GLR: Merge conflicting parses, impure, locations ok
616: GLR: Merge conflicting parses, pure, no locations ok
617: GLR: Merge conflicting parses, pure, locations  ok
618: GLR: Verbose messages, resolve ambiguity, impure, no locations ok

GLR Regression Tests

619: Badly Collapsed GLR States                      ok
620: Improper handling of embedded actions and dollar(-N) in GLR parsers ok
621: Improper merging of GLR delayed action sets     ok
622: Duplicate representation of merged trees        ok
623: User destructor for unresolved GLR semantic value ok
624: User destructor after an error during a split parse ok
625: Duplicated user destructor for lookahead        ok
626: Incorrectly initialized location for empty right-hand side in GLR ok
627: No users destructors if stack 0 deleted         ok
628: Corrupted semantic options if user action cuts parse ok
629: Undesirable destructors if user action cuts parse ok
630: Leaked semantic values if user action cuts parse ok
631: Incorrect lookahead during deterministic GLR    ok
632: Incorrect lookahead during nondeterministic GLR ok
633: Leaked semantic values when reporting ambiguity ok
634: Leaked lookahead after nondeterministic parse syntax error ok
635: Uninitialized location when reporting ambiguity ok
636: Missed %merge type warnings when LHS type is declared later ok
637: Ambiguity reports                               ok
638: Predicates                                      ok

## ------------- ##
## Test results. ##
## ------------- ##

628 tests were successful.
10 tests were skipped.
