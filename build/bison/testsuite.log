  GEN      public-submodule-commit
Making check in po
Making check in runtime-po
Making check in .
  GEN      doc/bison.help
updating examples/c/mfcalc/mfcalc.output
updating examples/c/mfcalc/mfcalc.h
updating examples/c/rpcalc/rpcalc.output
updating examples/c/rpcalc/rpcalc.h
  LEX      examples/c++/calc++/scanner.cc
updating examples/c++/simple.output
updating examples/c++/simple.hh
updating examples/c++/variant.output
updating examples/c++/variant.hh
updating examples/c++/variant-11.output
updating examples/c++/variant-11.hh
  GEN      examples/java/Calc.java
  GEN      examples/java/Calc.class
warning: [options] bootstrap class path not set in conjunction with -source 1.7
1 warning
PASS: examples/c/mfcalc/mfcalc.test
PASS: examples/c/rpcalc/rpcalc.test
PASS: examples/c/lexcalc/lexcalc.test
PASS: examples/c++/calc++/calc++.test
PASS: examples/c++/simple.test
PASS: examples/c++/variant.test
PASS: examples/c++/variant-11.test
PASS: examples/java/Calc.test
============================================================================
Testsuite summary for GNU Bison 3.3.1
============================================================================
# TOTAL: 8
# PASS:  8
# SKIP:  0
# XFAIL: 0
# FAIL:  0
# XPASS: 0
# ERROR: 0
============================================================================
Making all in po
Making all in runtime-po
Making all in .
  GEN      doc/bison.help
## --------------------------- ##
## GNU Bison 3.3.1 test suite. ##
## --------------------------- ##

Input Processing.

  1: Invalid number of arguments                     ok
  2: Invalid options                                 ok
  3: Invalid inputs                                  ok
  4: Invalid inputs with {}                          ok
  5: Yacc warnings on symbols                        ok
  6: Yacc warnings                                   ok
  7: Invalid symbol declarations                     ok
  8: Symbol declarations                             ok
  9: Invalid $n and @n                               ok
 10: Type Clashes                                    ok
 11: Unused values                                   ok
 12: Unused values before symbol declarations        ok
 13: Symbol class redefinition                       ok
 14: Default %printer and %destructor redeclared     ok
 15: Per-type %printer and %destructor redeclared    ok
 16: Undefined symbols                               ok
 17: Unassociated types used for a printer or destructor ok
 18: Useless printers or destructors                 ok
 19: Unused values with default %destructor          ok
 20: Unused values with per-type %destructor         ok
 21: Duplicate string                                ok
 22: Token collisions                                ok
 23: Incompatible Aliases                            ok
 24: Torturing the Scanner                           ok
 25: Typed symbol aliases                            ok
 26: Require 1.0                                     ok
 27: Require 3.3.1                                   ok
 28: Require 100.0                                   ok
 29: String aliases for character tokens             ok
 30: Symbols                                         ok
 31: Numbered tokens                                 ok
 32: Unclosed constructs                             ok
 33: %start after first rule                         ok
 34: %prec takes a token                             ok
 35: %prec's token must be defined                   ok
 36: Reject unused %code qualifiers                  ok
 37: Multiple %code                                  ok
 38: errors                                          ok
 39: %define, --define, --force-define               ok
 40: "%define" Boolean variables                     ok
 41: "%define" code variables                        ok
 42: "%define" keyword variables                     ok
 43: "%define" enum variables                        ok
 44: "%define" file variables                        ok
 45: "%define" backward compatibility                ok
 46: Unused api.pure                                 ok
 47: C++ namespace reference errors                  ok
 48: Bad character literals                          ok
 49: Bad escapes in literals                         ok
 50: LAC: Errors for %define                         ok
 51: -Werror combinations                            ok
 52: %name-prefix and api.prefix are incompatible    ok
 53: Redefined %union name                           ok
 54: Stray $ or @                                    ok
 55: Code injection                                  ok
 56: Deprecated directives                           ok
 57: Unput's effect on locations                     ok
 58: Non-deprecated directives                       ok
 59: Cannot type action                              ok

Named references tests.

 60: Tutorial calculator                             ok
 61: Undefined and ambiguous references              ok
 62: Misleading references                           ok
 63: Many kinds of errors                            ok
 64: Missing identifiers in brackets                 ok
 65: Redundant words in brackets                     ok
 66: Comments in brackets                            ok
 67: Stray symbols in brackets                       ok
 68: Redundant words in LHS brackets                 ok
 69: Factored LHS                                    ok
 70: Unresolved references                           ok
 71: $ or @ followed by . or -                       ok

Output file names.

 72: Output files:  -dv                              ok
 73: Output files:  -dv >&-                          ok
 74: Output files:  -dv -o foo.c                     ok
 75: Output files:  -dv -o foo.tab.c                 ok
 76: Output files:  -dv -g --xml -y                  ok
 77: Output files:  -dv -g --xml -o y.tab.c          ok
 78: Output files:  -dv -b bar                       ok
 79: Output files:  -dv -g -o foo.c                  ok
 80: Output files: %defines %verbose                 ok
 81: Output files: %defines %verbose %yacc           ok
 82: Output files: %defines %verbose %yacc           ok
 83: Output files: %file-prefix "bar" %defines %verbose  ok
 84: Output files: %output "bar.c" %defines %verbose %yacc  ok
 85: Output files: %file-prefix "baz" %output "bar.c" %defines %verbose %yacc  ok
 86: Output files: %defines %verbose                 ok
 87: Output files: %defines %verbose  -o foo.c       ok
 88: Output files:  --defines=foo.hpp -o foo.c++     ok
 89: Output files: %defines "foo.hpp" -o foo.c++     ok
 90: Output files:  -o foo.c++ --graph=foo.gph       ok
 91: Output files: %type <foo> useless --defines --graph --xml --report=all -Wall -Werror ok
 92: Output files: useless=--defines --graph --xml --report=all -Wall -Werror ok
 93: Output files: lalr1.cc                          ok
 94: Output files: lalr1.cc %verbose                 ok
 95: Output files: lalr1.cc %defines %verbose        ok
 96: Output files: lalr1.cc %verbose %locations      ok
 97: Output files: lalr1.cc %defines %verbose %locations  ok
 98: Output files: lalr1.cc %defines %verbose        ok
 99: Output files: lalr1.cc %defines %verbose %locations -o subdir/foo.cc ok
100: Output files: lalr1.cc %defines %verbose %file-prefix "output_dir/foo"  ok
101: Output files: lalr1.cc %defines %locations %verbose %file-prefix "output_dir/foo"  ok
102: Output files: lalr1.cc %defines %locations api.location.file=none %require "3.2"  ok
103: Output files: lalr1.cc %defines %locations api.location.file="foo.loc.hh" %require "3.2"  ok
104: Output files: lalr1.cc %defines %locations api.location.file="$at_dir/foo.loc.hh" %require "3.2"  ok
105: Conflicting output files:  --graph="foo.tab.c"  ok
106: Conflicting output files: %defines "foo.output" -v ok
107: Conflicting output files: lalr1.cc %defines %locations --graph="location.hh" ok
108: Conflicting output files:  -o foo.y             ok
109: Output file name: `~!@#$%^&*()-=_+{}[]|\:;<>, .' ok
110: Output file name: (                             ok
111: Output file name: )                             ok
112: Output file name: #                             ok
113: Output file name: @@                            ok
114: Output file name: @{                            ok
115: Output file name: @}                            ok
116: Output file name: [                             ok
117: Output file name: ]                             ok
118: Graph with no conflicts                         ok
119: Graph with unsolved S/R                         ok
120: Graph with solved S/R                           ok
121: Graph with R/R                                  ok
122: Graph with reductions with multiple LAT         ok
123: Graph with a reduction rule both enabled and disabled ok

Skeleton Support.

124: Relative skeleton file names                    ok
125: Installed skeleton file names                   ok
126: Boolean=variables: invalid skeleton defaults    ok
127: Complaining during macro argument expansion     ok
128: Fatal errors make M4 exit immediately           ok
129: Fatal errors but M4 continues producing output  ok

Grammar Sets (Firsts etc.).

130: Nullable                                        ok
131: Broken Closure                                  ok
132: Firsts                                          ok
133: Accept                                          ok

Grammar Reduction.

134: Useless Terminals                               ok
135: Useless Nonterminals                            ok
136: Useless Rules                                   ok
137: Reduced Automaton                               ok
138: Underivable Rules                               ok
139: Empty Language                                  ok
140: no lr.type: Single State Split                  ok
141: lr.type=lalr: Single State Split                ok
142: lr.type=ielr: Single State Split                ok
143: lr.type=canonical-lr: Single State Split        ok
144: no lr.type: Lane Split                          ok
145: lr.type=lalr: Lane Split                        ok
146: lr.type=ielr: Lane Split                        ok
147: lr.type=canonical-lr: Lane Split                ok
148: no lr.type: Complex Lane Split                  ok
149: lr.type=lalr: Complex Lane Split                ok
150: lr.type=ielr: Complex Lane Split                ok
151: lr.type=canonical-lr: Complex Lane Split        ok
152: no lr.type: Split During Added Lookahead Propagation ok
153: lr.type=lalr: Split During Added Lookahead Propagation ok
154: lr.type=ielr: Split During Added Lookahead Propagation ok
155: lr.type=canonical-lr: Split During Added Lookahead Propagation ok
156: no lr.default-reduction                         ok
157: lr.default-reduction=most                       ok
158: lr.default-reduction=consistent                 ok
159: lr.default-reduction=accepting                  ok

Test reports.

160: Reports                                         ok

Conflicts.

161: Token declaration order                         ok
162: Token declaration order: literals vs. identifiers ok
163: Useless associativity warning                   ok
164: Useless precedence warning                      ok
165: S/R in initial                                  ok
166: %nonassoc and eof                               ok
167: parse.error=verbose and consistent errors: lr.type=ielr ok
168: parse.error=verbose and consistent errors: lr.type=ielr %glr-parser ok
169: parse.error=verbose and consistent errors: lr.type=ielr c++ ok
170: parse.error=verbose and consistent errors: lr.type=ielr java ok
171: parse.error=verbose and consistent errors: lr.type=ielr lr.default-reduction=consistent ok
172: parse.error=verbose and consistent errors: lr.type=ielr lr.default-reduction=accepting ok
173: parse.error=verbose and consistent errors: lr.type=canonical-lr ok
174: parse.error=verbose and consistent errors: lr.type=canonical-lr parse.lac=full ok
175: parse.error=verbose and consistent errors: lr.type=ielr parse.lac=full ok
176: parse.error=verbose and consistent errors:      ok
177: parse.error=verbose and consistent errors: %glr-parser ok
178: parse.error=verbose and consistent errors: lr.default-reduction=consistent ok
179: parse.error=verbose and consistent errors: lr.default-reduction=accepting ok
180: parse.error=verbose and consistent errors: lr.type=canonical-lr ok
181: parse.error=verbose and consistent errors: parse.lac=full ok
182: parse.error=verbose and consistent errors: parse.lac=full lr.default-reduction=accepting ok
183: LAC: %nonassoc requires splitting canonical LR states ok
184: Unresolved SR Conflicts                         ok
185: Resolved SR Conflicts                           ok
186: %precedence suffices                            ok
187: %precedence does not suffice                    ok
188: Defaulted Conflicted Reduction                  ok
189: %expect not enough                              ok
190: %expect right                                   ok
191: %expect too much                                ok
192: %expect with reduce conflicts                   ok
193: %expect in grammar rule not enough              ok
194: %expect in grammar rule right                   ok
195: %expect in grammar rules                        ok
196: %expect in grammar rule too much                ok
197: %expect-rr in grammar rule                      ok
198: %expect-rr too much in grammar rule             ok
199: %expect-rr not enough in grammar rule           ok
200: %prec with user string                          ok
201: %no-default-prec without %prec                  ok
202: %no-default-prec with %prec                     ok
203: %default-prec                                   ok
204: Unreachable States After Conflict Resolution    ok
205: Solved conflicts report for multiple reductions in a state ok
206: %nonassoc error actions for multiple reductions in a state ok
207: %expect-rr non GLR                              ok
208: -W versus %expect and %expect-rr                ok

Sync Lines.

209: Prologue syncline                               ok
210: %union syncline                                 ok
211: %union name syncline                            ok
212: Postprologue syncline                           ok
213: Action syncline                                 ok
214: Epilogue syncline                               ok
215: %code top syncline                              ok
216: %destructor syncline                            ok
217: %printer syncline                               ok
218: syncline escapes: yacc.c                        ok
219: syncline escapes: glr.c                         ok
220: syncline escapes: lalr1.cc                      ok
221: syncline escapes: glr.cc                        ok
222: %no-lines: yacc.c                               ok
223: %no-lines: glr.c                                ok
224: %no-lines: lalr1.cc                             ok
225: %no-lines: glr.cc                               ok

Parser Headers.

226: Invalid CPP guards:  --defines=input/input.h    ok
227: Invalid CPP guards:  --defines=9foo.h           ok
228: Invalid CPP guards: %glr-parser --defines=input/input.h ok
229: Invalid CPP guards: %glr-parser --defines=9foo.h ok
230: export YYLTYPE                                  ok
231: Sane headers:                                   ok
232: Sane headers: %locations %debug                 ok
233: Sane headers: %glr-parser                       ok
234: Sane headers: %locations %debug %glr-parser     ok
235: Sane headers: api.pure                          ok
236: Sane headers: api.push-pull=both                ok
237: Sane headers: api.pure api.push-pull=both       ok
238: Sane headers: c++                               ok
239: Sane headers: %locations %debug c++             ok
240: Sane headers: c++ api.value.type=variant parse.assert ok
241: Sane headers: %locations c++ %glr-parser        ok
242: Several parsers                                 ok

User Actions.

243: Midrule actions                                 ok
244: Typed midrule actions                           ok
245: Implicitly empty rule                           ok
246: Invalid uses of %empty                          ok
247: Valid uses of %empty                            ok
248: Initial location: yacc.c                        ok
249: Initial location: yacc.c api.pure=full          ok
250: Initial location: yacc.c api.pure %parse-param { int x } ok
251: Initial location: yacc.c api.push-pull=both     ok
252: Initial location: yacc.c api.push-pull=both api.pure=full ok
253: Initial location: glr.c                         ok
254: Initial location: glr.c api.pure                ok
255: Initial location: lalr1.cc                      ok
256: Initial location: glr.cc                        ok
257: Initial location: yacc.c api.pure=full          ok
258: Initial location: yacc.c api.pure=full          ok
259: Location print: yacc.c                          ok
260: Location print: glr.c                           ok
261: Location print: lalr1.cc                        ok
262: Location print: glr.cc                          ok
263: Exotic Dollars                                  ok
264: Printers and Destructors                        ok
265: Printers and Destructors with union             ok
266: Printers and Destructors: %glr-parser           ok
267: Printers and Destructors with union: %glr-parser ok
268: Printers and Destructors: %defines lalr1.cc     ok
269: Printers and Destructors with union: %defines lalr1.cc ok
270: Printers and Destructors: %defines glr.cc       ok
271: Printers and Destructors with union: %defines glr.cc ok
272: Default tagless %printer and %destructor        ok
273: Default tagged and per-type %printer and %destructor ok
274: Default %printer and %destructor for user-defined end token ok
275: Default %printer and %destructor are not for error or $undefined ok
276: Default %printer and %destructor are not for $accept ok
277: Default %printer and %destructor for midrule values ok
278: @$ in %initial-action implies %locations        ok
279: @$ in %destructor implies %locations            ok
280: @$ in %printer implies %locations               ok
281: Qualified $$ in actions: yacc.c                 ok
282: Qualified $$ in actions: glr.c                  ok
283: Qualified $$ in actions: lalr1.cc               ok
284: Qualified $$ in actions: glr.cc                 ok
285: Destroying lookahead assigned by semantic action ok
286: YYBACKUP                                        ok

Value type tests.

287: %union vs. api.value.type                       ok
288: %yacc vs. api.value.type=union                  ok
289: yacc.c api.value.type={double}                  ok
290: yacc.c api.value.type={double} %defines         ok
291: yacc.c api.value.type={variant}                 ok
292: yacc.c api.value.type={variant} %defines        ok
293: yacc.c api.value.type={struct foo}              ok
294: yacc.c api.value.type={struct foo} %defines     ok
295: yacc.c api.value.type={struct bar}              ok
296: yacc.c api.value.type={struct bar} %defines     ok
297: yacc.c api.value.type={union foo}               ok
298: yacc.c api.value.type={union foo} %defines      ok
299: yacc.c %union { float fval; int ival; };        ok
300: yacc.c %union { float fval; int ival; }; %defines ok
301: yacc.c %union foo { float fval; int ival; };    ok
302: yacc.c %union foo { float fval; int ival; }; %defines ok
303: yacc.c api.value.union.name=foo; %union { float fval; int ival; }; ok
304: yacc.c api.value.union.name=foo; %union { float fval; int ival; }; %defines ok
305: yacc.c api.value.type=union                     ok
306: yacc.c api.value.type=union %defines            ok
307: glr.c api.value.type={double}                   ok
308: glr.c api.value.type={double} %defines          ok
309: glr.c api.value.type={variant}                  ok
310: glr.c api.value.type={variant} %defines         ok
311: glr.c api.value.type={struct foo}               ok
312: glr.c api.value.type={struct foo} %defines      ok
313: glr.c api.value.type={struct bar}               ok
314: glr.c api.value.type={struct bar} %defines      ok
315: glr.c api.value.type={union foo}                ok
316: glr.c api.value.type={union foo} %defines       ok
317: glr.c %union { float fval; int ival; };         ok
318: glr.c %union { float fval; int ival; }; %defines ok
319: glr.c %union foo { float fval; int ival; };     ok
320: glr.c %union foo { float fval; int ival; }; %defines ok
321: glr.c api.value.union.name=foo; %union { float fval; int ival; }; ok
322: glr.c api.value.union.name=foo; %union { float fval; int ival; }; %defines ok
323: glr.c api.value.type=union                      ok
324: glr.c api.value.type=union %defines             ok
325: lalr1.cc api.value.type={double}                ok
326: lalr1.cc api.value.type={double} %defines       ok
327: lalr1.cc api.value.type={variant}               ok
328: lalr1.cc api.value.type={variant} %defines      ok
329: lalr1.cc api.value.type={struct foo}            ok
330: lalr1.cc api.value.type={struct foo} %defines   ok
331: lalr1.cc api.value.type={struct bar}            ok
332: lalr1.cc api.value.type={struct bar} %defines   ok
333: lalr1.cc api.value.type={union foo}             ok
334: lalr1.cc api.value.type={union foo} %defines    ok
335: lalr1.cc %union { float fval; int ival; };      ok
336: lalr1.cc %union { float fval; int ival; }; %defines ok
337: lalr1.cc api.value.type=union                   ok
338: lalr1.cc api.value.type=union %defines          ok
339: lalr1.cc api.value.type=variant                 ok
340: lalr1.cc api.value.type=variant %defines        ok
341: lalr1.cc api.value.type=variant                 ok
342: lalr1.cc api.value.type=variant %defines        ok
343: lalr1.cc api.value.type=variant api.token.constructor ok
344: lalr1.cc api.value.type=variant api.token.constructor %defines ok
345: lalr1.cc %code requires { #include <memory> } api.value.type=variant ok
346: lalr1.cc %code requires { #include <memory> } api.value.type=variant %defines ok
347: lalr1.cc %code requires { #include <memory> } api.value.type=variant api.token.constructor ok
348: lalr1.cc %code requires { #include <memory> } api.value.type=variant api.token.constructor %defines ok
349: lalr1.cc %code requires { #include <memory> } api.value.type=variant api.token.constructor ok
350: lalr1.cc %code requires { #include <memory> } api.value.type=variant api.token.constructor %defines ok
351: glr.cc api.value.type={double}                  ok
352: glr.cc api.value.type={double} %defines         ok
353: glr.cc api.value.type={variant}                 ok
354: glr.cc api.value.type={variant} %defines        ok
355: glr.cc api.value.type={struct foo}              ok
356: glr.cc api.value.type={struct foo} %defines     ok
357: glr.cc api.value.type={struct bar}              ok
358: glr.cc api.value.type={struct bar} %defines     ok
359: glr.cc api.value.type={union foo}               ok
360: glr.cc api.value.type={union foo} %defines      ok
361: glr.cc %union { float fval; int ival; };        ok
362: glr.cc %union { float fval; int ival; }; %defines ok
363: glr.cc api.value.type=union                     ok
364: glr.cc api.value.type=union %defines            ok
365: lalr1.cc: Named %union                          ok
366: glr.cc: Named %union                            ok

Simple LALR(1) Calculator.

367: Calculator                                      ok
368: Calculator %defines                             ok
369: Calculator %locations                           ok
370: Calculator %name-prefix "calc"                  ok
371: Calculator %verbose                             ok
372: Calculator %yacc                                ok
373: Calculator parse.error=verbose                  ok
374: Calculator api.pure=full %locations             ok
375: Calculator api.push-pull=both api.pure=full %locations  ok
376: Calculator parse.error=verbose %locations       ok
377: Calculator parse.error=verbose %locations %defines api.prefix={calc} %verbose %yacc  ok
378: Calculator parse.error=verbose %locations %defines %name-prefix "calc" api.token.prefix={TOK_} %verbose %yacc  ok
379: Calculator %debug                               ok
380: Calculator parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose %yacc  ok
381: Calculator parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %yacc  ok
382: Calculator api.pure=full parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose %yacc  ok
383: Calculator api.push-pull=both api.pure=full parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %yacc  ok
384: Calculator api.pure parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count}  ok

Simple GLR Calculator.

385: Calculator %glr-parser                          ok
386: Calculator %glr-parser %defines                 ok
387: Calculator %glr-parser %locations               ok
388: Calculator %glr-parser %name-prefix "calc"      ok
389: Calculator %glr-parser api.prefix={calc}        ok
390: Calculator %glr-parser %verbose                 ok
391: Calculator %glr-parser %yacc                    ok
392: Calculator %glr-parser parse.error=verbose      ok
393: Calculator %glr-parser api.pure %locations      ok
394: Calculator %glr-parser parse.error=verbose %locations  ok
395: Calculator %glr-parser parse.error=verbose %locations %defines %name-prefix "calc" %verbose %yacc  ok
396: Calculator %glr-parser %debug                   ok
397: Calculator %glr-parser parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose %yacc  ok
398: Calculator %glr-parser parse.error=verbose %debug %locations %defines api.prefix={calc} api.token.prefix={TOK_} %verbose %yacc  ok
399: Calculator %glr-parser api.pure parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose %yacc  ok
400: Calculator %glr-parser api.pure parse.error=verbose %debug %locations %defines %name-prefix "calc" %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count}  ok
401: Calculator %glr-parser api.pure parse.error=verbose %debug %locations %defines api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count}  ok

Simple LALR(1) C++ Calculator.

402: Calculator lalr1.cc %defines                    ok
403: Calculator C++                                  ok
404: Calculator C++ %locations                       ok
406: Calculator C++ %locations api.location.type={Span}  ok
407: Calculator C++ %defines %locations parse.error=verbose %name-prefix "calc" %verbose %yacc  ok
408: Calculator C++ %locations parse.error=verbose api.prefix={calc} %verbose %yacc  ok
409: Calculator C++ %locations parse.error=verbose %debug %name-prefix "calc" %verbose %yacc  ok
410: Calculator C++ %locations parse.error=verbose %debug api.prefix={calc} %verbose %yacc  ok
411: Calculator C++ %locations parse.error=verbose %debug api.prefix={calc} api.token.prefix={TOK_} %verbose %yacc  ok
412: Calculator C++ %defines %locations parse.error=verbose %debug %name-prefix "calc" %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count}  ok
413: Calculator C++ parse.error=verbose %debug api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count}  ok
414: Calculator C++ %defines %locations parse.error=verbose %debug api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count}  ok
415: Calculator C++ %defines %locations api.location.file=none  ok
416: Calculator C++ %defines %locations api.location.file="my-location.hh"  ok

Simple GLR C++ Calculator.

417: Calculator glr.cc                               ok
418: Calculator C++ %glr-parser                      ok
419: Calculator C++ %glr-parser %locations           ok
420: Calculator C++ %glr-parser %locations api.location.type={Span}  ok
421: Calculator C++ %glr-parser %defines parse.error=verbose %name-prefix "calc" %verbose %yacc  ok
422: Calculator C++ %glr-parser parse.error=verbose api.prefix={calc} %verbose %yacc  ok
423: Calculator C++ %glr-parser %debug               ok
424: Calculator C++ %glr-parser parse.error=verbose %debug %name-prefix "calc" %verbose %yacc  ok
425: Calculator C++ %glr-parser parse.error=verbose %debug %name-prefix "calc" api.token.prefix={TOK_} %verbose %yacc  ok
426: Calculator C++ %glr-parser %locations %defines parse.error=verbose %debug %name-prefix "calc" %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count}  ok
427: Calculator C++ %glr-parser %locations %defines parse.error=verbose %debug api.prefix={calc} %verbose %yacc %parse-param {semantic_value *result} %parse-param {int *count}  ok

Torture Tests.

428: Big triangle                                    ok
429: Big horizontal                                  ok
430: Many lookahead tokens                           ok
431: Exploding the Stack Size with Alloca            ok
432: Exploding the Stack Size with Malloc            ok

Existing Grammars.

433: GNU AWK 3.1.0 Grammar: LALR(1)                  ok
434: GNU AWK 3.1.0 Grammar: IELR(1)                  ok
435: GNU AWK 3.1.0 Grammar: Canonical LR(1)          ok
436: GNU Cim Grammar: LALR(1)                        ok
437: GNU Cim Grammar: IELR(1)                        ok
438: GNU Cim Grammar: Canonical LR(1)                ok
439: GNU pic (Groff 1.18.1) Grammar: LALR(1)         ok
440: GNU pic (Groff 1.18.1) Grammar: IELR(1)         ok
441: GNU pic (Groff 1.18.1) Grammar: Canonical LR(1) ok

Regression tests.

442: Trivial grammars                                ok
443: YYSTYPE typedef                                 ok
444: Early token definitions with --yacc             ok
445: Early token definitions without --yacc          ok
446: Braces parsing                                  ok
447: Rule Line Numbers                               ok
448: Mixing %token styles                            ok
449: Invalid inputs                                  ok
450: Invalid inputs with {}                          ok
451: Token definitions                               ok
452: Characters Escapes                              ok
453: Web2c Report                                    ok
454: Web2c Actions                                   ok
455: Dancer                                          ok
456: Dancer %glr-parser                              ok
457: Dancer lalr1.cc                                 ok
458: Expecting two tokens                            ok
459: Expecting two tokens %glr-parser                ok
460: Expecting two tokens lalr1.cc                   ok
461: Braced code in declaration in rules section     ok
462: String alias declared after use                 ok
463: Extra lookahead sets in report                  ok
464: Token number in precedence declaration          ok
465: parse-gram.y: LALR = IELR                       ok
466: parse.error=verbose and YYSTACK_USE_ALLOCA      ok
467: parse.error=verbose overflow                    ok
468: LAC: Exploratory stack                          ok
469: LAC: Memory exhaustion                          ok
470: Lex and parse params: yacc.c                    ok
471: Lex and parse params: glr.c                     ok
472: Lex and parse params: lalr1.cc                  ok
473: Lex and parse params: glr.cc                    ok
474: stdio.h is not needed                           ok

Push Parsing Tests

475: Memory Leak for Early Deletion                  ok
476: Multiple impure instances                       ok
477: Unsupported Skeletons                           ok

C++ Features.

478: C++ Locations Unit Tests                        ok
479: C++ Variant-based Symbols Unit Tests            ok
480: Multiple occurrences of $n and api.value.automove ok
481: Variants lalr1.cc                               ok
482: Variants lalr1.cc parse.assert                  ok
483: Variants lalr1.cc parse.assert api.value.automove ok
484: Variants lalr1.cc parse.assert %locations       ok
485: Variants lalr1.cc parse.assert %code {\n#define TWO_STAGE_BUILD\n} ok
486: Variants lalr1.cc parse.assert api.token.constructor ok
487: Variants lalr1.cc parse.assert api.token.constructor api.token.prefix={TOK_} ok
488: Variants lalr1.cc parse.assert api.token.constructor api.token.prefix={TOK_} %locations ok
489: Variants lalr1.cc parse.assert api.token.constructor api.token.prefix={TOK_} %locations api.value.automove ok
490: Variants and Typed Midrule Actions              ok
491: Doxygen Public Documentation                    skipped (c++.at:772)
492: Doxygen Private Documentation                   skipped (c++.at:773)
493: Relative namespace references                   ok
494: Absolute namespace references                   ok
495: Syntactically invalid namespace references      ok
496: Syntax error discarding no lookahead            ok
497: Syntax error as exception: lalr1.cc             ok
498: Syntax error as exception: glr.cc               ok
499: Exception safety with error recovery            ok
500: Exception safety without error recovery         ok
501: Exception safety with error recovery api.value.type=variant ok
502: Exception safety without error recovery api.value.type=variant ok
503: C++ GLR parser identifier shadowing             ok
504: Shared locations                                ok

Java Calculator.

505: Calculator                                      ok
506: Calculator parse.error=verbose                  ok
507: Calculator %locations                           ok
508: Calculator parse.error=verbose %locations       ok
509: Calculator %lex-param { InputStream is }        ok
510: Calculator parse.error=verbose %lex-param { InputStream is }  ok
511: Calculator %locations %lex-param { InputStream is }  ok
512: Calculator parse.error=verbose %locations %lex-param { InputStream is }  ok

Java Parameters.

513: Java parser class and package names             ok
514: Java parser class modifiers                     ok
515: Java parser class extends and implements        ok
516: Java %parse-param and %lex-param                ok
517: Java throws specifications                      ok
518: Java constructor init and init_throws           ok
519: Java value, position, and location types        ok
520: Java syntax error handling without error token  ok

Java Push Parsing Tests

521: Trivial Push Parser with api.push-pull verification ok
522: Trivial Push Parser with %initial-action        ok
523: Calc parser with api.push-pull both             ok
524: Calc parser with %locations %code lexer and api.push-pull both ok

C++ Type Syntax (GLR).

525: GLR: Resolve ambiguity, impure, no locations    ok
526: GLR: Resolve ambiguity, impure, locations       ok
527: GLR: Resolve ambiguity, pure, no locations      ok
528: GLR: Resolve ambiguity, pure, locations         ok
529: GLR: Merge conflicting parses, impure, no locations ok
530: GLR: Merge conflicting parses, impure, locations ok
531: GLR: Merge conflicting parses, pure, no locations ok
532: GLR: Merge conflicting parses, pure, locations  ok
533: GLR: Verbose messages, resolve ambiguity, impure, no locations ok

GLR Regression Tests

534: Badly Collapsed GLR States                      ok
535: Improper handling of embedded actions and dollar(-N) in GLR parsers ok
536: Improper merging of GLR delayed action sets     ok
537: Duplicate representation of merged trees        ok
538: User destructor for unresolved GLR semantic value ok
539: User destructor after an error during a split parse ok
540: Duplicated user destructor for lookahead        ok
541: Incorrectly initialized location for empty right-hand side in GLR ok
542: No users destructors if stack 0 deleted         ok
543: Corrupted semantic options if user action cuts parse ok
544: Undesirable destructors if user action cuts parse ok
545: Leaked semantic values if user action cuts parse ok
546: Incorrect lookahead during deterministic GLR    ok
547: Incorrect lookahead during nondeterministic GLR ok
548: Leaked semantic values when reporting ambiguity ok
549: Leaked lookahead after nondeterministic parse syntax error ok
550: Uninitialized location when reporting ambiguity ok
551: Missed %merge type warnings when LHS type is declared later ok
552: Ambiguity reports                               ok
553: Predicates                                      ok

## ------------- ##
## Test results. ##
## ------------- ##

551 tests were successful.
2 tests were skipped.
