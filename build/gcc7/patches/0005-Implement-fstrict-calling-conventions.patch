From 2170230e196ecd0052c840136a4902295349b3e7 Mon Sep 17 00:00:00 2001
From: Richard Lowe <richlowe@richlowe.net>
Date: Sat, 27 Oct 2012 02:44:09 +0100
Subject: [PATCH 05/11] Implement -fstrict-calling-conventions

Stock GCC is overly willing to violate the ABI when calling local functions,
such that it passes arguments in registers on i386.  This hampers debugging
with anything other than a fully-aware DWARF debugger, and is generally not
something we desire.

Implement a flag which disables this behaviour, enabled by default.  The flag is
global, though only effective on i386, to more easily allow its globalization
later which, given the odds, is likely to be necessary.
diff -prwuN '--exclude=*.orig' gcc-7.3.0~/gcc/common.opt gcc-7.3.0/gcc/common.opt
--- gcc-7.3.0~/gcc/common.opt	2017-06-22 11:38:22.113724000 +0000
+++ gcc-7.3.0/gcc/common.opt	2018-05-08 14:44:05.313234441 +0000
@@ -2341,6 +2341,10 @@ fstrict-aliasing
 Common Report Var(flag_strict_aliasing) Optimization
 Assume strict aliasing rules apply.
 
+fstrict-calling-conventions
+Common Report Var(flag_strict_calling_conventions) Init(1)
+Use strict ABI calling conventions even for static functions
+
 fstrict-overflow
 Common Report Var(flag_strict_overflow) Optimization
 Treat signed overflow as undefined.
diff -prwuN '--exclude=*.orig' gcc-7.3.0~/gcc/config/i386/i386.c gcc-7.3.0/gcc/config/i386/i386.c
--- gcc-7.3.0~/gcc/config/i386/i386.c	2018-01-16 12:49:29.534125000 +0000
+++ gcc-7.3.0/gcc/config/i386/i386.c	2018-05-08 14:44:05.322498433 +0000
@@ -8015,6 +8015,7 @@ ix86_function_regparm (const_tree type,
 	 and callee not, or vice versa.  Instead look at whether the callee
 	 is optimized or not.  */
       if (target && opt_for_fn (target->decl, optimize)
+	  && !flag_strict_calling_conventions
 	  && !(profile_flag && !flag_fentry))
 	{
 	  cgraph_local_info *i = &target->local;
@@ -8112,6 +8113,7 @@ ix86_function_sseregparm (const_tree typ
       /* TARGET_SSE_MATH */
       && (target_opts_for_fn (target->decl)->x_ix86_fpmath & FPMATH_SSE)
       && opt_for_fn (target->decl, optimize)
+      && !flag_strict_calling_conventions
       && !(profile_flag && !flag_fentry))
     {
       cgraph_local_info *i = &target->local;
diff -prwuN '--exclude=*.orig' gcc-7.3.0~/gcc/doc/invoke.texi gcc-7.3.0/gcc/doc/invoke.texi
--- gcc-7.3.0~/gcc/doc/invoke.texi	2018-01-16 11:22:01.161048000 +0000
+++ gcc-7.3.0/gcc/doc/invoke.texi	2018-05-08 14:44:05.326300651 +0000
@@ -8639,6 +8639,12 @@ int f() @{
 The @option{-fstrict-aliasing} option is enabled at levels
 @option{-O2}, @option{-O3}, @option{-Os}.
 
+@item -fstrict-calling-conventions
+@opindex fstrict-calling-conventions
+Use strict ABI calling conventions even with local functions.
+This disable certain optimizations that may cause GCC to call local
+functions in a manner other than that described by the ABI.
+
 @item -fstrict-overflow
 @opindex fstrict-overflow
 Allow the compiler to assume strict signed overflow rules, depending
diff -prwuN '--exclude=*.orig' gcc-7.3.0~/gcc/testsuite/gcc.target/i386/local.c gcc-7.3.0/gcc/testsuite/gcc.target/i386/local.c
--- gcc-7.3.0~/gcc/testsuite/gcc.target/i386/local.c	2015-12-29 10:32:21.184118000 +0000
+++ gcc-7.3.0/gcc/testsuite/gcc.target/i386/local.c	2018-05-08 14:44:05.326474379 +0000
@@ -1,5 +1,6 @@
 /* { dg-do compile } */
-/* { dg-options "-O2 -funit-at-a-time" } */
+/* { dg-options "-O2 -funit-at-a-time -fno-strict-calling-conventions" { target ia32 } } */
+/* { dg-options "-O2 -funit-at-a-time" { target lp64 } } */
 /* { dg-final { scan-assembler "magic\[^\\n\]*eax" { target ia32 } } } */
 /* { dg-final { scan-assembler "magic\[^\\n\]*(edi|ecx)" { target { ! ia32 } } } } */
 
diff -prwuN '--exclude=*.orig' gcc-7.3.0~/gcc/testsuite/gcc.target/i386/strict-cc.c gcc-7.3.0/gcc/testsuite/gcc.target/i386/strict-cc.c
--- gcc-7.3.0~/gcc/testsuite/gcc.target/i386/strict-cc.c	1970-01-01 00:00:00.000000000 +0000
+++ gcc-7.3.0/gcc/testsuite/gcc.target/i386/strict-cc.c	2018-05-08 14:44:05.326614380 +0000
@@ -0,0 +1,24 @@
+/* { dg-do compile { target { ilp32 } } } */
+/* { dg-options "-O2 -funit-at-a-time -fstrict-calling-conventions"  } */
+/* { dg-final { scan-assembler "pushl.*\\\$1" } } */
+/* { dg-final { scan-assembler "pushl.*\\\$2" } } */
+/* { dg-final { scan-assembler "pushl.*\\\$3" } } */
+/* { dg-final { scan-assembler "pushl.*\\\$4" } } */
+/* { dg-final { scan-assembler "pushl.*\\\$5" } } */
+
+#include <stdio.h>
+
+/* Verify that local calling convention is not used if strict conventions.  */
+static int t(int, int, int, int, int) __attribute__ ((noinline));
+
+int
+m()
+{
+    t(1, 2, 3, 4, 5);
+}
+
+static int
+t(int a, int b, int c, int d, int e)
+{
+    printf("%d\n", a, b, c, d, e);
+}
