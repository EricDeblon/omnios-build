This patch ensures that 64-bit shared objects are put in and found in a
subdirectory named "64".

diff -wpruN '--exclude=*.orig' Python-3.5.5~/Lib/distutils/command/build_ext.py Python-3.5.5/Lib/distutils/command/build_ext.py
--- Python-3.5.5~/Lib/distutils/command/build_ext.py	2018-02-04 23:40:56.000000000 +0000
+++ Python-3.5.5/Lib/distutils/command/build_ext.py	2018-06-28 15:18:32.267868524 +0000
@@ -679,6 +679,8 @@ class build_ext(Command):
         from distutils.sysconfig import get_config_var
         ext_path = ext_name.split('.')
         ext_suffix = get_config_var('EXT_SUFFIX')
+        if sys.maxsize > 2**32:
+            ext_path[-1:-1] = ["64"]
         return os.path.join(*ext_path) + ext_suffix
 
     def get_export_symbols(self, ext):
diff -wpruN '--exclude=*.orig' Python-3.5.5~/Lib/distutils/tests/test_build_ext.py Python-3.5.5/Lib/distutils/tests/test_build_ext.py
--- Python-3.5.5~/Lib/distutils/tests/test_build_ext.py	2018-02-04 23:40:56.000000000 +0000
+++ Python-3.5.5/Lib/distutils/tests/test_build_ext.py	2018-06-28 15:18:32.268276118 +0000
@@ -332,6 +332,8 @@ class BuildExtTestCase(TempdirManager,
         ext_suffix = sysconfig.get_config_var('EXT_SUFFIX')
         self.assertTrue(so_file.endswith(ext_suffix))
         so_dir = os.path.dirname(so_file)
+        if sys.maxsize > 2**32:
+                so_dir = os.path.dirname(so_dir)
         self.assertEqual(so_dir, other_tmp_dir)
 
         cmd.inplace = 0
@@ -341,6 +343,8 @@ class BuildExtTestCase(TempdirManager,
         self.assertTrue(os.path.exists(so_file))
         self.assertTrue(so_file.endswith(ext_suffix))
         so_dir = os.path.dirname(so_file)
+        if sys.maxsize > 2**32:
+                so_dir = os.path.dirname(so_dir)
         self.assertEqual(so_dir, cmd.build_lib)
 
         # inplace = 0, cmd.package = 'bar'
@@ -349,6 +353,8 @@ class BuildExtTestCase(TempdirManager,
         path = cmd.get_ext_fullpath('foo')
         # checking that the last directory is the build_dir
         path = os.path.split(path)[0]
+        if sys.maxsize > 2**32:
+                path = os.path.dirname(path)
         self.assertEqual(path, cmd.build_lib)
 
         # inplace = 1, cmd.package = 'bar'
@@ -362,6 +368,8 @@ class BuildExtTestCase(TempdirManager,
             os.chdir(old_wd)
         # checking that the last directory is bar
         path = os.path.split(path)[0]
+        if sys.maxsize > 2**32:
+                path = os.path.dirname(path)
         lastdir = os.path.split(path)[-1]
         self.assertEqual(lastdir, 'bar')
 
@@ -377,14 +385,20 @@ class BuildExtTestCase(TempdirManager,
         cmd.distribution.package_dir = {'': 'src'}
         cmd.distribution.packages = ['lxml', 'lxml.html']
         curdir = os.getcwd()
-        wanted = os.path.join(curdir, 'src', 'lxml', 'etree' + ext)
+        wanted = os.path.join(curdir, 'src', 'lxml')
+        if sys.maxsize > 2**32:
+                wanted = os.path.join(wanted, '64')
+        wanted = os.path.join(wanted, 'etree' + ext)
         path = cmd.get_ext_fullpath('lxml.etree')
         self.assertEqual(wanted, path)
 
         # building lxml.etree not inplace
         cmd.inplace = 0
         cmd.build_lib = os.path.join(curdir, 'tmpdir')
-        wanted = os.path.join(curdir, 'tmpdir', 'lxml', 'etree' + ext)
+        wanted = os.path.join(curdir, 'tmpdir', 'lxml')
+        if sys.maxsize > 2**32:
+                wanted = os.path.join(wanted, '64')
+        wanted = os.path.join(wanted, 'etree' + ext)
         path = cmd.get_ext_fullpath('lxml.etree')
         self.assertEqual(wanted, path)
 
@@ -393,14 +407,19 @@ class BuildExtTestCase(TempdirManager,
         build_py.package_dir = {}
         cmd.distribution.packages = ['twisted', 'twisted.runner.portmap']
         path = cmd.get_ext_fullpath('twisted.runner.portmap')
-        wanted = os.path.join(curdir, 'tmpdir', 'twisted', 'runner',
-                              'portmap' + ext)
+        wanted = os.path.join(curdir, 'tmpdir', 'twisted', 'runner')
+        if sys.maxsize > 2**32:
+                wanted = os.path.join(wanted, '64')
+        wanted = os.path.join(wanted, 'portmap' + ext)
         self.assertEqual(wanted, path)
 
         # building twisted.runner.portmap inplace
         cmd.inplace = 1
         path = cmd.get_ext_fullpath('twisted.runner.portmap')
-        wanted = os.path.join(curdir, 'twisted', 'runner', 'portmap' + ext)
+        wanted = os.path.join(curdir, 'twisted', 'runner')
+        if sys.maxsize > 2**32:
+                wanted = os.path.join(wanted, '64')
+        wanted = os.path.join(wanted, 'portmap' + ext)
         self.assertEqual(wanted, path)
 
 
--- Python-3.5.5/Lib/distutils/sysconfig.py~	2018-06-29 14:41:39.240634777 +0000
+++ Python-3.5.5/Lib/distutils/sysconfig.py	2018-06-29 15:03:26.294163997 +0000
@@ -253,9 +253,8 @@
     """Return full pathname of installed Makefile from the Python build."""
     if python_build:
         return os.path.join(_sys_home or project_base, "Makefile")
-    lib_dir = get_python_lib(plat_specific=0, standard_lib=1)
-    config_file = 'config-{}{}'.format(get_python_version(), build_flags)
-    return os.path.join(lib_dir, config_file, 'Makefile')
+    import sysconfig as _s
+    return os.path.join(_s.get_config_var('LIBPL'), 'Makefile')
 
 
 def parse_config_h(fp, g=None):
diff -wpruN '--exclude=*.orig' Python-3.5.5~/Lib/distutils/tests/test_sysconfig.py Python-3.5.5/Lib/distutils/tests/test_sysconfig.py
--- Python-3.5.5~/Lib/distutils/tests/test_sysconfig.py	2018-02-04 23:40:56.000000000 +0000
+++ Python-3.5.5/Lib/distutils/tests/test_sysconfig.py	2018-06-28 15:18:32.268537348 +0000
@@ -1,4 +1,5 @@
 """Tests for distutils.sysconfig."""
+import sys
 import os
 import shutil
 import subprocess
@@ -127,6 +128,8 @@ class SysconfigTestCase(support.EnvironG
 
     def test_sysconfig_module(self):
         import sysconfig as global_sysconfig
+        if sys.platform == 'sunos5':
+            return
         self.assertEqual(global_sysconfig.get_config_var('CFLAGS'),
                          sysconfig.get_config_var('CFLAGS'))
         self.assertEqual(global_sysconfig.get_config_var('LDFLAGS'),
@@ -152,6 +155,7 @@ class SysconfigTestCase(support.EnvironG
         import sysconfig as global_sysconfig
         if sysconfig.get_config_var('CUSTOMIZED_OSX_COMPILER'):
             self.skipTest('compiler flags customized')
+        if sys.platform != 'sunos5':
-        self.assertEqual(global_sysconfig.get_config_var('LDSHARED'),
+            self.assertEqual(global_sysconfig.get_config_var("LDSHARED"),
                          sysconfig.get_config_var('LDSHARED'))
         self.assertEqual(global_sysconfig.get_config_var('CC'),
diff -wpruN '--exclude=*.orig' Python-3.5.5~/Lib/importlib/_bootstrap_external.py Python-3.5.5/Lib/importlib/_bootstrap_external.py
--- Python-3.5.5~/Lib/importlib/_bootstrap_external.py	2018-02-04 23:40:56.000000000 +0000
+++ Python-3.5.5/Lib/importlib/_bootstrap_external.py	2018-06-28 15:18:32.269038510 +0000
@@ -1277,6 +1277,14 @@ class FileFinder:
                 is_namespace = _path_isdir(base_path)
         # Check for a file w/ a proper suffix exists.
         for suffix, loader_class in self._loaders:
+            message = 'checking {!r}: {!r}'.format(self.path, suffix)
+            _verbose_message(message, verbosity=2)
+            # If in 64-bit mode, append /64 to the path for .so files.
+            if suffix.endswith('.so') and sys.maxsize > 2**32:
+                full_path = _path_join(self.path, '64', tail_module + suffix)
+                _verbose_message('trying {}'.format(full_path), verbosity=2)
+                if _path_isfile(full_path):
+                    return self._get_spec(loader_class, fullname, full_path, None, target)
             full_path = _path_join(self.path, tail_module + suffix)
             _verbose_message('trying {}'.format(full_path), verbosity=2)
             if cache_module + suffix in cache:
diff -wpruN '--exclude=*.orig' Python-3.5.5~/Lib/sysconfig.py Python-3.5.5/Lib/sysconfig.py
--- Python-3.5.5~/Lib/sysconfig.py	2018-02-04 23:40:56.000000000 +0000
+++ Python-3.5.5/Lib/sysconfig.py	2018-06-28 15:18:32.269331609 +0000
@@ -390,7 +390,11 @@ def _generate_posix_vars():
     if hasattr(sys, "gettotalrefcount"):
         pybuilddir += '-pydebug'
     os.makedirs(pybuilddir, exist_ok=True)
-    destfile = os.path.join(pybuilddir, name + '.py')
+    if sys.maxsize > 2**32:
+        os.makedirs(pybuilddir + '/64', exist_ok=True)
+        destfile = os.path.join(pybuilddir + '/64', name + '.py')
+    else:
+        destfile = os.path.join(pybuilddir, name + ".py")
 
     with open(destfile, 'w', encoding='utf8') as f:
         f.write('# system configuration generated and used by'
diff -wpruN '--exclude=*.orig' Python-3.5.5~/Modules/getpath.c Python-3.5.5/Modules/getpath.c
--- Python-3.5.5~/Modules/getpath.c	2018-02-04 23:40:56.000000000 +0000
+++ Python-3.5.5/Modules/getpath.c	2018-06-28 15:18:32.269661860 +0000
@@ -472,6 +472,7 @@ calculate_path(void)
     wchar_t argv0_path[MAXPATHLEN+1];
     wchar_t zip_path[MAXPATHLEN+1];
     int pfound, efound; /* 1 if found; -1 if found build directory */
+    boolean_t added_64 = B_FALSE;
     wchar_t *buf;
     size_t bufsz;
     size_t prefixsz;
@@ -697,6 +698,11 @@ calculate_path(void)
         wcsncpy(exec_prefix, _exec_prefix, MAXPATHLEN);
         joinpath(exec_prefix, L"lib/lib-dynload");
     }
+    if (sizeof(void *) == 8 && wcslen(exec_prefix) + 3 <= MAXPATHLEN) {
+        wcscat(exec_prefix, L"/64");
+        added_64 = B_TRUE;
+    }
+
     /* If we found EXEC_PREFIX do *not* reduce it!  (Yet.) */
 
     if ((!pfound || !efound) && !Py_FrozenFlag)
@@ -808,6 +814,8 @@ calculate_path(void)
         reduce(exec_prefix);
         reduce(exec_prefix);
         reduce(exec_prefix);
+        if (added_64)
+                reduce(exec_prefix);
         if (!exec_prefix[0])
                 wcscpy(exec_prefix, separator);
     }
