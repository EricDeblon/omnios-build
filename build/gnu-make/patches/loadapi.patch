
It is not safe to stash pointers to memory in a loadable object which is then
unloaded and reloaded - the mapped in address can change.

Patch taken from https://savannah.gnu.org/bugs/?63315#comment3

diff -wpruN '--exclude=*.orig' a~/src/function.c a/src/function.c
--- a~/src/function.c	1970-01-01 00:00:00
+++ a/src/function.c	1970-01-01 00:00:00
@@ -2801,7 +2801,7 @@ define_new_function (const floc *flocp,
          _("Invalid maximum argument count (%u) for function %s"), max, name);
 
   ent = xmalloc (sizeof (struct function_table_entry));
-  ent->name = name;
+  ent->name = xstrdup (name);
   ent->len = (unsigned char) len;
   ent->minimum_args = (unsigned char) min;
   ent->maximum_args = (unsigned char) max;
@@ -2812,7 +2812,11 @@ define_new_function (const floc *flocp,
   ent->fptr.alloc_func_ptr = func;
 
   ent = hash_insert (&function_table, ent);
-  free (ent);
+  if (ent)
+    {
+      free ((void*)ent->name);
+      free (ent); // keepindent
+    }
 }
 
 void
